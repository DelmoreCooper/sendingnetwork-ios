#if 0
#elif defined(__x86_64__) && __x86_64__
// Generated by Apple Swift version 5.7.2 (swiftlang-5.7.2.135.5 clang-1400.0.29.51)
#ifndef SENDINGNETWORKSDK_SWIFT_H
#define SENDINGNETWORKSDK_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wduplicate-method-match"
#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if defined(__cplusplus)
#if !defined(SWIFT_NOEXCEPT)
# define SWIFT_NOEXCEPT noexcept
#endif
#else
#if !defined(SWIFT_NOEXCEPT)
# define SWIFT_NOEXCEPT 
#endif
#endif
#if defined(__cplusplus)
#if !defined(SWIFT_CXX_INT_DEFINED)
#define SWIFT_CXX_INT_DEFINED
namespace swift {
using Int = ptrdiff_t;
using UInt = size_t;
}
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreData;
@import Dispatch;
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#import <SendingnetworkSDK/SendingnetworkSDK.h>

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="SendingnetworkSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)


@class NSString;

SWIFT_CLASS("_TtC17SendingnetworkSDK11Credentials")
@interface Credentials : NSObject
- (nonnull instancetype)initWithUserName:(NSString * _Nonnull)userName password:(NSString * _Nonnull)password userId:(NSString * _Nonnull)userId accessToken:(NSString * _Nonnull)accessToken deviceId:(NSString * _Nonnull)deviceId OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull userName;
@property (nonatomic, readonly, copy) NSString * _Nonnull password;
@property (nonatomic, readonly, copy) NSString * _Nonnull userId;
@property (nonatomic, readonly, copy) NSString * _Nonnull accessToken;
@property (nonatomic, readonly, copy) NSString * _Nonnull deviceId;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSURL;

@interface NSFileManager (SWIFT_EXTENSION(SendingnetworkSDK))
/// Get the url of the primary Sendingnetwork application group container.
- (NSURL * _Nullable)applicationGroupContainerURL SWIFT_WARN_UNUSED_RESULT;
@end


@interface NSFileManager (SWIFT_EXTENSION(SendingnetworkSDK))
/// Create a directory at a url, including intermediate directories, which is excluded from iCloud / manual backups, no matter where it is located.
/// Note: some directories are excluded automatically if they are nested within <code><AppHome>/Library/Caches/</code> or <code><AppHome>/tmp/</code>
/// see <a href="https://developer.apple.com/documentation/foundation/optimizing_app_data_for_icloud_backup">details</a>.
- (BOOL)createDirectoryExcludedFromBackupAt:(NSURL * _Nonnull)url error:(NSError * _Nullable * _Nullable)error;
/// Create a directory at a path, including intermediate directories, which is excluded from iCloud / manual backups, no matter where it is located.
/// Note: some directories are excluded automatically if they are nested within <code><AppHome>/Library/Caches/</code> or <code><AppHome>/tmp/</code>
/// see <a href="https://developer.apple.com/documentation/foundation/optimizing_app_data_for_icloud_backup">details</a>.
- (BOOL)createDirectoryExcludedFromBackupAtPath:(NSString * _Nonnull)path error:(NSError * _Nullable * _Nullable)error;
/// Exclude a given url from iCloud / manual backups, no matter where it is located.
/// Note: some directories are excluded automatically if they are nested within <code><AppHome>/Library/Caches/</code> or <code><AppHome>/tmp/</code>
/// see <a href="https://developer.apple.com/documentation/foundation/optimizing_app_data_for_icloud_backup">details</a>.
- (BOOL)excludeItemFromBackupAt:(NSURL * _Nonnull)url error:(NSError * _Nullable * _Nullable)error;
@end



/// Scheduler to run one asynchronous or synchronous task at a time.
SWIFT_CLASS("_TtC17SendingnetworkSDK16MXAsyncTaskQueue")
@interface MXAsyncTaskQueue : NSObject
- (nonnull instancetype)initWithDispatchQueue:(dispatch_queue_t _Nonnull)dispatchQueue label:(NSString * _Nonnull)label OBJC_DESIGNATED_INITIALIZER;
/// Schedule a new task.
/// Call the passed <code>taskCompleted</code> block when the task is done.
/// \param block the task to execute
///
- (void)asyncWithExecute:(void (^ _Nonnull)(void (^ _Nonnull)(void)))block;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class MXCredentials;
@class MXEvent;
@class MXRoomState;
@class MXPushRule;

/// Background push rules manager. Does work independent from a <code>MXNotificationCenter</code>.
SWIFT_CLASS("_TtC17SendingnetworkSDK28MXBackgroundPushRulesManager")
@interface MXBackgroundPushRulesManager : NSObject
/// Initializer.
/// \param credentials Credentials to use when fetching initial push rules.
///
- (nonnull instancetype)initWithCredentials:(MXCredentials * _Nonnull)credentials OBJC_DESIGNATED_INITIALIZER;
/// Handle account data from a sync response.
/// \param accountData The account data to be handled.
///
- (void)handleAccountData:(NSDictionary * _Nonnull)accountData;
/// Check whether the given room is mentions only.
/// \param roomId The room identifier to be checked
///
///
/// returns:
/// If the room is mentions only.
- (BOOL)isRoomMentionsOnly:(NSString * _Nonnull)roomId SWIFT_WARN_UNUSED_RESULT;
/// Fetch push rule matching an event.
/// \param event The event to be matched.
///
/// \param roomState Room state.
///
/// \param currentUserDisplayName Display name of the current user.
///
///
/// returns:
/// Push rule matching the event.
- (MXPushRule * _Nullable)pushRuleMatching:(MXEvent * _Nonnull)event roomState:(MXRoomState * _Nonnull)roomState currentUserDisplayName:(NSString * _Nullable)currentUserDisplayName SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@protocol MXRoomSummaryProtocol;

/// This class can be used to sync in background, keeping the user offline. It does not initiate MXSession or MXCrypto instances.
/// Sync results are written to a MXSyncResponseFileStore.
SWIFT_CLASS("_TtC17SendingnetworkSDK23MXBackgroundSyncService")
@interface MXBackgroundSyncService : NSObject
@property (nonatomic, readonly, strong) MXCredentials * _Nonnull credentials;
/// See MXSyncResponseStoreManager.syncResponseCacheSizeLimit
@property (nonatomic) NSInteger syncResponseCacheSizeLimit;
/// Initializer
/// \param credentials account credentials
///
- (nonnull instancetype)initWithCredentials:(MXCredentials * _Nonnull)credentials persistTokenDataHandler:(MXRestClientPersistTokenDataHandler _Nullable)persistTokenDataHandler unauthenticatedHandler:(MXRestClientUnauthenticatedHandler _Nullable)unauthenticatedHandler OBJC_DESIGNATED_INITIALIZER;
/// Check whether the given room is mentions only.
/// \param roomId The room identifier to be checked
///
///
/// returns:
/// If the room is mentions only.
- (BOOL)isRoomMentionsOnly:(NSString * _Nonnull)roomId SWIFT_WARN_UNUSED_RESULT;
/// Fetch the summary for the given room identifier.
/// \param roomId The room identifier to fetch.
///
///
/// returns:
/// Summary of room.
- (id <MXRoomSummaryProtocol> _Nullable)roomSummaryForRoomId:(NSString * _Nonnull)roomId SWIFT_WARN_UNUSED_RESULT;
/// Fetch push rule matching an event.
/// \param event The event to be matched.
///
/// \param roomState Room state.
///
///
/// returns:
/// Push rule matching the event.
- (MXPushRule * _Nullable)pushRuleMatching:(MXEvent * _Nonnull)event roomState:(MXRoomState * _Nonnull)roomState SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class MXSession;
@protocol MXBeaconInfoSummaryStoreProtocol;
@protocol MXBeaconInfoSummaryProtocol;

/// MXBeaconAggregations aggregates related beacon info events and beacon info events into a summary object MXBeaconInfoSummary
SWIFT_CLASS("_TtC17SendingnetworkSDK20MXBeaconAggregations")
@interface MXBeaconAggregations : NSObject
- (nonnull instancetype)initWithSession:(MXSession * _Nonnull)session store:(id <MXBeaconInfoSummaryStoreProtocol> _Nonnull)store OBJC_DESIGNATED_INITIALIZER;
/// Get MXBeaconInfoSummary from the first beacon info event id
- (id <MXBeaconInfoSummaryProtocol> _Nullable)beaconInfoSummaryFor:(NSString * _Nonnull)eventId inRoomWithId:(NSString * _Nonnull)roomId SWIFT_WARN_UNUSED_RESULT;
/// Get all MXBeaconInfoSummary in a room
- (NSArray<id <MXBeaconInfoSummaryProtocol>> * _Nonnull)getBeaconInfoSummariesInRoomWithId:(NSString * _Nonnull)roomId SWIFT_WARN_UNUSED_RESULT;
/// Get all MXBeaconInfoSummary in a room for a user
- (NSArray<id <MXBeaconInfoSummaryProtocol>> * _Nonnull)getBeaconInfoSummariesFor:(NSString * _Nonnull)userId inRoomWithId:(NSString * _Nonnull)roomId SWIFT_WARN_UNUSED_RESULT;
/// Get all MXBeaconInfoSummary for a user
- (NSArray<id <MXBeaconInfoSummaryProtocol>> * _Nonnull)getBeaconInfoSummariesFor:(NSString * _Nonnull)userId SWIFT_WARN_UNUSED_RESULT;
/// Update a MXBeaconInfoSummary device id that belongs to the current user.
/// Enables to recognize that a beacon info has been started on the device
- (void)updateBeaconInfoSummaryWith:(NSString * _Nonnull)eventId deviceId:(NSString * _Nonnull)deviceId inRoomWithId:(NSString * _Nonnull)roomId;
- (void)clearDataInRoomWithId:(NSString * _Nonnull)roomId;
- (void)handleBeaconWithEvent:(MXEvent * _Nonnull)event;
- (void)handleBeaconInfoWithEvent:(MXEvent * _Nonnull)event;
/// Listen to all beacon info summary updates in a room
- (id _Nullable)listenToBeaconInfoSummaryUpdateInRoomWithId:(NSString * _Nonnull)roomId handler:(void (^ _Nonnull)(id <MXBeaconInfoSummaryProtocol> _Nonnull))handler SWIFT_WARN_UNUSED_RESULT;
/// Listen to all beacon info summary update in all rooms
- (id _Nullable)listenToBeaconInfoSummaryUpdateWithHandler:(void (^ _Nonnull)(NSString * _Nonnull, id <MXBeaconInfoSummaryProtocol> _Nonnull))handler SWIFT_WARN_UNUSED_RESULT;
- (void)removeListener:(id _Nonnull)listener;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class MXBeaconInfo;
@class MXBeacon;

/// MXBeaconInfoSummaryProtocol decscribes a summary of live location sharing for a user sharing his location in a room.
/// It aggregates the start live location sharing state event <code>m.beacon_info</code> with last live location event <code>m.beacon</code>.
SWIFT_PROTOCOL("_TtP17SendingnetworkSDK27MXBeaconInfoSummaryProtocol_")
@protocol MXBeaconInfoSummaryProtocol
/// First beacon info event id that start live location
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
/// User id of the beacon info
@property (nonatomic, readonly, copy) NSString * _Nonnull userId;
/// Device id where location sharing started
/// Only set from the user device and stored locally.
/// This property stay nil on all other devices.
@property (nonatomic, readonly, copy) NSString * _Nullable deviceId;
/// Room id of the beacon info
@property (nonatomic, readonly, copy) NSString * _Nonnull roomId;
/// Live location start event
@property (nonatomic, readonly, strong) MXBeaconInfo * _Nonnull beaconInfo;
/// Last received location event
@property (nonatomic, readonly, strong) MXBeacon * _Nullable lastBeacon;
/// Beacon info expiry timestamp in milliseconds
@property (nonatomic, readonly) uint64_t expiryTimestamp;
/// Indicate if beacon info has expired
@property (nonatomic, readonly) BOOL hasExpired;
/// Indicate if beacon info has stopped
@property (nonatomic, readonly) BOOL hasStopped;
/// Indicate true if beacon info is not expired and beacon info is not stopped
@property (nonatomic, readonly) BOOL isActive;
@end


/// MXBeaconInfoSummary summarize live location sharing for a user sharing his location in a room.
SWIFT_CLASS("_TtC17SendingnetworkSDK19MXBeaconInfoSummary")
@interface MXBeaconInfoSummary : NSObject <MXBeaconInfoSummaryProtocol>
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
@property (nonatomic, readonly, copy) NSString * _Nonnull userId;
@property (nonatomic, readonly, copy) NSString * _Nonnull roomId;
@property (nonatomic, readonly, copy) NSString * _Nullable deviceId;
@property (nonatomic, readonly, strong) MXBeaconInfo * _Nonnull beaconInfo;
@property (nonatomic, readonly, strong) MXBeacon * _Nullable lastBeacon;
@property (nonatomic, readonly) uint64_t expiryTimestamp;
@property (nonatomic, readonly) BOOL hasExpired;
@property (nonatomic, readonly) BOOL hasStopped;
@property (nonatomic, readonly) BOOL isActive;
- (nullable instancetype)initWithBeaconInfo:(MXBeaconInfo * _Nonnull)beaconInfo;
- (nonnull instancetype)initWithIdentifier:(NSString * _Nonnull)identifier userId:(NSString * _Nonnull)userId roomId:(NSString * _Nonnull)roomId beaconInfo:(MXBeaconInfo * _Nonnull)beaconInfo OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC17SendingnetworkSDK34MXBeaconInfoSummaryAllRoomListener")
@interface MXBeaconInfoSummaryAllRoomListener : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Represents MXBeaconInfoSummary store
SWIFT_PROTOCOL("_TtP17SendingnetworkSDK32MXBeaconInfoSummaryStoreProtocol_")
@protocol MXBeaconInfoSummaryStoreProtocol
/// Add or update a MXBeaconInfoSummary for a given room
- (void)addOrUpdateBeaconInfoSummary:(MXBeaconInfoSummary * _Nonnull)beaconInfoSummary inRoomWithId:(NSString * _Nonnull)roomId;
/// Get a MXBeaconInfoSummary from his identifier in a given room. The identifier is the first beacon info event id.
- (MXBeaconInfoSummary * _Nullable)getBeaconInfoSummaryWithIdentifier:(NSString * _Nonnull)identifier inRoomWithId:(NSString * _Nonnull)roomId SWIFT_WARN_UNUSED_RESULT;
/// Get a MXBeaconInfoSummary from exact property values
- (MXBeaconInfoSummary * _Nullable)getBeaconInfoSummaryWithUserId:(NSString * _Nonnull)userId description:(NSString * _Nullable)description timeout:(uint64_t)timeout timestamp:(uint64_t)timestamp inRoomWithId:(NSString * _Nonnull)roomId SWIFT_WARN_UNUSED_RESULT;
/// Get all MXBeaconInfoSummary in a room for a user
- (NSArray<MXBeaconInfoSummary *> * _Nonnull)getBeaconInfoSummariesFor:(NSString * _Nonnull)userId inRoomWithId:(NSString * _Nonnull)roomId SWIFT_WARN_UNUSED_RESULT;
/// Get all MXBeaconInfoSummary in a room
- (NSArray<MXBeaconInfoSummary *> * _Nonnull)getAllBeaconInfoSummariesInRoomWithId:(NSString * _Nonnull)roomId SWIFT_WARN_UNUSED_RESULT;
/// Get all MXBeaconInfoSummary for a user
- (NSArray<MXBeaconInfoSummary *> * _Nonnull)getAllBeaconInfoSummariesForUserId:(NSString * _Nonnull)userId SWIFT_WARN_UNUSED_RESULT;
/// Delete MXBeaconInfoSummary with given identifier in a room
- (void)deleteBeaconInfoSummaryWith:(NSString * _Nonnull)identifier inRoomWithId:(NSString * _Nonnull)inRoomWithId;
/// Delete all MXBeaconInfoSummary in a room
- (void)deleteAllBeaconInfoSummariesInRoomWithId:(NSString * _Nonnull)roomId;
/// Delete all MXBeaconInfoSummary
- (void)deleteAllBeaconInfoSummaries;
@end


/// MXBeaconInfoSummary memory store
SWIFT_CLASS("_TtC17SendingnetworkSDK30MXBeaconInfoSummaryMemoryStore")
@interface MXBeaconInfoSummaryMemoryStore : NSObject <MXBeaconInfoSummaryStoreProtocol>
- (void)addOrUpdateBeaconInfoSummary:(MXBeaconInfoSummary * _Nonnull)beaconInfoSummary inRoomWithId:(NSString * _Nonnull)roomId;
- (MXBeaconInfoSummary * _Nullable)getBeaconInfoSummaryWithIdentifier:(NSString * _Nonnull)identifier inRoomWithId:(NSString * _Nonnull)roomId SWIFT_WARN_UNUSED_RESULT;
- (NSArray<MXBeaconInfoSummary *> * _Nonnull)getBeaconInfoSummariesFor:(NSString * _Nonnull)userId inRoomWithId:(NSString * _Nonnull)roomId SWIFT_WARN_UNUSED_RESULT;
- (NSArray<MXBeaconInfoSummary *> * _Nonnull)getAllBeaconInfoSummariesForUserId:(NSString * _Nonnull)userId SWIFT_WARN_UNUSED_RESULT;
- (NSArray<MXBeaconInfoSummary *> * _Nonnull)getAllBeaconInfoSummariesInRoomWithId:(NSString * _Nonnull)roomId SWIFT_WARN_UNUSED_RESULT;
- (void)deleteBeaconInfoSummaryWith:(NSString * _Nonnull)identifier inRoomWithId:(NSString * _Nonnull)roomId;
- (void)deleteAllBeaconInfoSummariesInRoomWithId:(NSString * _Nonnull)roomId;
- (void)deleteAllBeaconInfoSummaries;
- (MXBeaconInfoSummary * _Nullable)getBeaconInfoSummaryWithUserId:(NSString * _Nonnull)userId description:(NSString * _Nullable)description timeout:(uint64_t)timeout timestamp:(uint64_t)timestamp inRoomWithId:(NSString * _Nonnull)roomId SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC17SendingnetworkSDK34MXBeaconInfoSummaryPerRoomListener")
@interface MXBeaconInfoSummaryPerRoomListener : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



SWIFT_CLASS("_TtC17SendingnetworkSDK29MXBeaconInfoSummaryRealmStore")
@interface MXBeaconInfoSummaryRealmStore : NSObject
- (nonnull instancetype)initWithSession:(MXSession * _Nonnull)session OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface MXBeaconInfoSummaryRealmStore (SWIFT_EXTENSION(SendingnetworkSDK)) <MXBeaconInfoSummaryStoreProtocol>
- (void)addOrUpdateBeaconInfoSummary:(MXBeaconInfoSummary * _Nonnull)beaconInfoSummary inRoomWithId:(NSString * _Nonnull)roomId;
- (MXBeaconInfoSummary * _Nullable)getBeaconInfoSummaryWithIdentifier:(NSString * _Nonnull)identifier inRoomWithId:(NSString * _Nonnull)roomId SWIFT_WARN_UNUSED_RESULT;
- (MXBeaconInfoSummary * _Nullable)getBeaconInfoSummaryWithUserId:(NSString * _Nonnull)userId description:(NSString * _Nullable)description timeout:(uint64_t)timeout timestamp:(uint64_t)timestamp inRoomWithId:(NSString * _Nonnull)roomId SWIFT_WARN_UNUSED_RESULT;
- (NSArray<MXBeaconInfoSummary *> * _Nonnull)getBeaconInfoSummariesFor:(NSString * _Nonnull)userId inRoomWithId:(NSString * _Nonnull)roomId SWIFT_WARN_UNUSED_RESULT;
- (NSArray<MXBeaconInfoSummary *> * _Nonnull)getAllBeaconInfoSummariesForUserId:(NSString * _Nonnull)userId SWIFT_WARN_UNUSED_RESULT;
- (NSArray<MXBeaconInfoSummary *> * _Nonnull)getAllBeaconInfoSummariesInRoomWithId:(NSString * _Nonnull)roomId SWIFT_WARN_UNUSED_RESULT;
- (void)deleteBeaconInfoSummaryWith:(NSString * _Nonnull)identifier inRoomWithId:(NSString * _Nonnull)roomId;
- (void)deleteAllBeaconInfoSummariesInRoomWithId:(NSString * _Nonnull)roomId;
- (void)deleteAllBeaconInfoSummaries;
@end


@class MXRoomListDataFetchOptions;
@protocol MXRoomListDataFetcher;

SWIFT_PROTOCOL("_TtP17SendingnetworkSDK21MXRoomListDataManager_")
@protocol MXRoomListDataManager
/// Configured session
@property (nonatomic, readonly, strong) MXSession * _Nullable session;
/// Configures the data manager with a session. It’s only valid for the first time.
/// \param session session to configure with
///
- (void)configureWithSession:(MXSession * _Nonnull)session;
/// Creates a fetcher object. Manager implementation should not keep a strong reference to this fetcher. It should be caller’s responsibility.
/// \param options fetch options for the fetcher
///
- (id <MXRoomListDataFetcher> _Nonnull)fetcherWithOptions:(MXRoomListDataFetchOptions * _Nonnull)options SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC17SendingnetworkSDK29MXCoreDataRoomListDataManager")
@interface MXCoreDataRoomListDataManager : NSObject <MXRoomListDataManager>
@property (nonatomic, weak) MXSession * _Nullable session;
- (void)configureWithSession:(MXSession * _Nonnull)session;
- (id <MXRoomListDataFetcher> _Nonnull)fetcherWithOptions:(MXRoomListDataFetchOptions * _Nonnull)options SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC17SendingnetworkSDK26MXCoreDataRoomSummaryStore")
@interface MXCoreDataRoomSummaryStore : NSObject
- (nonnull instancetype)initWithCredentials:(MXCredentials * _Nonnull)credentials OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



@interface MXCoreDataRoomSummaryStore (SWIFT_EXTENSION(SendingnetworkSDK)) <MXRoomSummaryStore>
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nonnull rooms;
@property (nonatomic, readonly) NSUInteger countOfRooms;
- (void)storeSummary:(id <MXRoomSummaryProtocol> _Nonnull)summary;
- (id <MXRoomSummaryProtocol> _Nullable)summaryOfRoom:(NSString * _Nonnull)roomId SWIFT_WARN_UNUSED_RESULT;
- (void)removeSummaryOfRoom:(NSString * _Nonnull)roomId;
- (void)removeAllSummaries;
- (void)fetchAllSummaries:(void (^ _Nonnull)(NSArray<id <MXRoomSummaryProtocol>> * _Nonnull))completion;
@end

@class MXKeyBackup;
@class MXKeyVerificationManager;
@class MXRecoveryService;
@class MXSecretStorage;
@class MXSecretShareManager;
@class MXCrossSigning;
@class MXExportedOlmDevice;
@class MXRoom;
@class MXHTTPOperation;
@class MXEventDecryptionResult;
@class MXDeviceListResponse;
@class NSNumber;
@class MXDeviceInfo;
@class MXUserTrustLevel;
@class MXDeviceTrustLevel;
@class MXUsersTrustLevelSummary;
@class MXCrossSigningInfo;
@class NSData;
@class MXIncomingRoomKeyRequest;

/// A work-in-progress subclass of <code>MXCrypto</code> which uses <a href="https://github.com/sending-network/sendingnetwork-rust-sdk/tree/main/crates/sendingnetwork-sdk-crypto">sendingnetwork-rust-sdk</a>
/// under the hood.
/// This subclass serves as a skeleton to enable iterative implementation of sendingnetwork-rust-sdk without affecting existing
/// production code. It is a subclass because <code>MXCrypto</code> does not define a reusable protocol, and to define one would require
/// further risky refactors across the application.
/// Another benefit of using a subclass and overriding every method with new implementation is that existing integration tests
/// for crypto-related functionality can still run (and eventually pass) without any changes.
SWIFT_CLASS("_TtC17SendingnetworkSDK10MXCryptoV2")
@interface MXCryptoV2 : MXCrypto
@property (nonatomic, readonly, copy) NSString * _Null_unspecified deviceCurve25519Key;
@property (nonatomic, readonly, copy) NSString * _Null_unspecified deviceEd25519Key;
@property (nonatomic, readonly, copy) NSString * _Null_unspecified olmVersion;
@property (nonatomic, readonly, strong) MXKeyBackup * _Null_unspecified backup;
@property (nonatomic, readonly, strong) MXKeyVerificationManager * _Null_unspecified keyVerificationManager;
@property (nonatomic, readonly, strong) MXRecoveryService * _Null_unspecified recoveryService;
@property (nonatomic, readonly, strong) MXSecretStorage * _Null_unspecified secretStorage;
@property (nonatomic, readonly, strong) MXSecretShareManager * _Null_unspecified secretShareManager;
@property (nonatomic, readonly, strong) MXCrossSigning * _Null_unspecified crossSigning;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
+ (MXCrypto * _Null_unspecified)createCryptoWithSendingnetworkSession:(MXSession * _Null_unspecified)mxSession SWIFT_WARN_UNUSED_RESULT;
+ (void)checkCryptoWithSendingnetworkSession:(MXSession * _Null_unspecified)mxSession complete:(void (^ _Null_unspecified)(MXCrypto * _Nullable))complete;
+ (void)rehydrateExportedOlmDevice:(MXExportedOlmDevice * _Null_unspecified)exportedOlmDevice withCredentials:(MXCredentials * _Null_unspecified)credentials complete:(void (^ _Null_unspecified)(BOOL))complete;
- (void)start:(void (^ _Null_unspecified)(void))onComplete failure:(void (^ _Null_unspecified)(NSError * _Nullable))failure;
- (void)close:(BOOL)deleteStore;
- (MXHTTPOperation * _Null_unspecified)encryptEventContent:(NSDictionary * _Null_unspecified)eventContent withType:(NSString * _Null_unspecified)eventType inRoom:(MXRoom * _Null_unspecified)room success:(void (^ _Null_unspecified)(NSDictionary * _Nullable, NSString * _Nullable))success failure:(void (^ _Null_unspecified)(NSError * _Nullable))failure SWIFT_WARN_UNUSED_RESULT;
- (void)hasKeysToDecryptEvent:(MXEvent * _Null_unspecified)event onComplete:(void (^ _Null_unspecified)(BOOL))onComplete;
- (MXEventDecryptionResult * _Null_unspecified)decryptEvent:(MXEvent * _Null_unspecified)event inTimeline:(NSString * _Null_unspecified)timeline SWIFT_WARN_UNUSED_RESULT;
- (void)decryptEvents:(NSArray<MXEvent *> * _Null_unspecified)events inTimeline:(NSString * _Null_unspecified)timeline onComplete:(void (^ _Null_unspecified)(NSArray<MXEventDecryptionResult *> * _Nullable))onComplete;
- (MXHTTPOperation * _Null_unspecified)ensureEncryptionInRoom:(NSString * _Null_unspecified)roomId success:(void (^ _Null_unspecified)(void))success failure:(void (^ _Null_unspecified)(NSError * _Nullable))failure SWIFT_WARN_UNUSED_RESULT;
- (void)discardOutboundGroupSessionForRoomWithRoomId:(NSString * _Null_unspecified)roomId onComplete:(void (^ _Null_unspecified)(void))onComplete;
- (void)handleDeviceListsChanges:(MXDeviceListResponse * _Null_unspecified)deviceLists;
- (void)handleDeviceOneTimeKeysCount:(NSDictionary<NSString *, NSNumber *> * _Null_unspecified)deviceOneTimeKeysCount;
- (void)handleDeviceUnusedFallbackKeys:(NSArray<NSString *> * _Null_unspecified)deviceUnusedFallbackKeys;
- (void)handleRoomKeyEvent:(MXEvent * _Null_unspecified)event onComplete:(void (^ _Null_unspecified)(void))onComplete;
- (void)onSyncCompleted:(NSString * _Null_unspecified)oldSyncToken nextSyncToken:(NSString * _Null_unspecified)nextSyncToken catchingUp:(BOOL)catchingUp;
- (MXDeviceInfo * _Null_unspecified)eventDeviceInfo:(MXEvent * _Null_unspecified)event SWIFT_WARN_UNUSED_RESULT;
- (void)setDeviceVerification:(MXDeviceVerification)verificationStatus forDevice:(NSString * _Null_unspecified)deviceId ofUser:(NSString * _Null_unspecified)userId success:(void (^ _Null_unspecified)(void))success failure:(void (^ _Null_unspecified)(NSError * _Nullable))failure;
- (void)setDevicesKnown:(MXUsersDevicesMap<MXDeviceInfo *> * _Null_unspecified)devices complete:(void (^ _Null_unspecified)(void))complete;
- (void)setUserVerification:(BOOL)verificationStatus forUser:(NSString * _Null_unspecified)userId success:(void (^ _Null_unspecified)(void))success failure:(void (^ _Null_unspecified)(NSError * _Nullable))failure;
- (MXUserTrustLevel * _Null_unspecified)trustLevelForUser:(NSString * _Null_unspecified)userId SWIFT_WARN_UNUSED_RESULT;
- (MXDeviceTrustLevel * _Null_unspecified)deviceTrustLevelForDevice:(NSString * _Null_unspecified)deviceId ofUser:(NSString * _Null_unspecified)userId SWIFT_WARN_UNUSED_RESULT;
- (void)trustLevelSummaryForUserIds:(NSArray<NSString *> * _Null_unspecified)userIds success:(void (^ _Null_unspecified)(MXUsersTrustLevelSummary * _Nullable))success failure:(void (^ _Null_unspecified)(NSError * _Nullable))failure;
- (void)trustLevelSummaryForUserIds:(NSArray<NSString *> * _Null_unspecified)userIds onComplete:(void (^ _Null_unspecified)(MXUsersTrustLevelSummary * _Nullable))onComplete;
- (MXHTTPOperation * _Null_unspecified)downloadKeys:(NSArray<NSString *> * _Null_unspecified)userIds forceDownload:(BOOL)forceDownload success:(void (^ _Null_unspecified)(MXUsersDevicesMap<MXDeviceInfo *> * _Nullable, NSDictionary<NSString *, MXCrossSigningInfo *> * _Nullable))success failure:(void (^ _Null_unspecified)(NSError * _Nullable))failure SWIFT_WARN_UNUSED_RESULT;
- (MXCrossSigningInfo * _Null_unspecified)crossSigningKeysForUser:(NSString * _Null_unspecified)userId SWIFT_WARN_UNUSED_RESULT;
- (NSDictionary<NSString *, MXDeviceInfo *> * _Null_unspecified)devicesForUser:(NSString * _Null_unspecified)userId SWIFT_WARN_UNUSED_RESULT;
- (MXDeviceInfo * _Null_unspecified)deviceWithDeviceId:(NSString * _Null_unspecified)deviceId ofUser:(NSString * _Null_unspecified)userId SWIFT_WARN_UNUSED_RESULT;
- (void)resetReplayAttackCheckInTimeline:(NSString * _Null_unspecified)timeline;
- (void)resetDeviceKeys;
- (void)deleteStore:(void (^ _Null_unspecified)(void))onComplete;
- (void)requestAllPrivateKeys;
- (void)exportRoomKeys:(void (^ _Null_unspecified)(NSArray<NSDictionary *> * _Nullable))success failure:(void (^ _Null_unspecified)(NSError * _Nullable))failure;
- (void)exportRoomKeysWithPassword:(NSString * _Null_unspecified)password success:(void (^ _Null_unspecified)(NSData * _Nullable))success failure:(void (^ _Null_unspecified)(NSError * _Nullable))failure;
- (void)importRoomKeys:(NSArray<NSDictionary *> * _Null_unspecified)keys success:(void (^ _Null_unspecified)(NSUInteger, NSUInteger))success failure:(void (^ _Null_unspecified)(NSError * _Nullable))failure;
- (void)importRoomKeys:(NSData * _Null_unspecified)keyFile withPassword:(NSString * _Null_unspecified)password success:(void (^ _Null_unspecified)(NSUInteger, NSUInteger))success failure:(void (^ _Null_unspecified)(NSError * _Nullable))failure;
- (void)pendingKeyRequests:(void (^ _Null_unspecified)(MXUsersDevicesMap<NSArray *> * _Nullable))onComplete;
- (void)acceptKeyRequest:(MXIncomingRoomKeyRequest * _Null_unspecified)keyRequest success:(void (^ _Null_unspecified)(void))success failure:(void (^ _Null_unspecified)(NSError * _Nullable))failure;
- (void)acceptAllPendingKeyRequestsFromUser:(NSString * _Null_unspecified)userId andDevice:(NSString * _Null_unspecified)deviceId onComplete:(void (^ _Null_unspecified)(void))onComplete;
- (void)ignoreKeyRequest:(MXIncomingRoomKeyRequest * _Null_unspecified)keyRequest onComplete:(void (^ _Null_unspecified)(void))onComplete;
- (void)ignoreAllPendingKeyRequestsFromUser:(NSString * _Null_unspecified)userId andDevice:(NSString * _Null_unspecified)deviceId onComplete:(void (^ _Null_unspecified)(void))onComplete;
- (void)setOutgoingKeyRequestsEnabled:(BOOL)enabled onComplete:(void (^ _Null_unspecified)(void))onComplete;
- (BOOL)isOutgoingKeyRequestsEnabled SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic) BOOL enableOutgoingKeyRequestsOnceSelfVerificationDone;
- (void)reRequestRoomKeyForEvent:(MXEvent * _Null_unspecified)event;
@property (nonatomic) BOOL warnOnUnknowDevices;
@property (nonatomic) BOOL globalBlacklistUnverifiedDevices;
- (BOOL)isBlacklistUnverifiedDevicesInRoom:(NSString * _Null_unspecified)roomId SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isRoomEncrypted:(NSString * _Null_unspecified)roomId SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isRoomSharingHistory:(NSString * _Null_unspecified)roomId SWIFT_WARN_UNUSED_RESULT;
- (void)setBlacklistUnverifiedDevicesInRoom:(NSString * _Null_unspecified)roomId blacklist:(BOOL)blacklist;
@end


@interface MXEvent (SWIFT_EXTENSION(SendingnetworkSDK))
/// Flag indicating the receiver event should be highlighted
/// \param session session instance to read notification rules from
///
///
/// returns:
/// true if clients should highlight the receiver event
- (BOOL)shouldBeHighlightedInSession:(MXSession * _Nonnull)session SWIFT_WARN_UNUSED_RESULT;
@end



/// MXEventAssetTypeMapper enables to get the corresponding MXEventAssetType from event key String and the other way around.
SWIFT_CLASS("_TtC17SendingnetworkSDK22MXEventAssetTypeMapper")
@interface MXEventAssetTypeMapper : NSObject
/// Return event key String associate to the MXEventAssetType given
- (NSString * _Nonnull)eventKeyFrom:(MXEventAssetType)eventAssetType SWIFT_WARN_UNUSED_RESULT;
/// Return MXEventAssetType associate to the event key String given
- (MXEventAssetType)eventAssetTypeFrom:(NSString * _Nonnull)eventKey SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@protocol MXLiveEventListener;

/// Manages the adding, removing MXLiveEventListeners and dispatching of events to those listeners.
SWIFT_CLASS("_TtC17SendingnetworkSDK20MXEventStreamService")
@interface MXEventStreamService : NSObject
- (void)addWithEventStreamListener:(id <MXLiveEventListener> _Nonnull)eventStreamListener;
- (void)removeWithEventStreamListener:(id <MXLiveEventListener> _Nonnull)eventStreamListener;
- (void)dispatchSessionStateChangedWithState:(MXSessionState)state;
- (void)dispatchLiveEventDecryptionAttemptedWithEvent:(MXEvent * _Nonnull)event result:(MXEventDecryptionResult * _Nonnull)result;
- (void)dispatchOnLiveToDeviceWithEvent:(MXEvent * _Nonnull)event;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// A structure that parses a geo URI (i.e. geo:53.99803101552848,-8.25347900390625;u=10) and constructs their constituent parts.
SWIFT_CLASS("_TtC17SendingnetworkSDK18MXGeoURIComponents")
@interface MXGeoURIComponents : NSObject
@property (nonatomic, readonly) double latitude;
@property (nonatomic, readonly) double longitude;
@property (nonatomic, readonly, copy) NSString * _Nonnull geoURI;
- (nullable instancetype)initWithGeoURI:(NSString * _Nonnull)geoURI;
- (nonnull instancetype)initWithLatitude:(double)latitude longitude:(double)longitude OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum MXRoomCapabilityType : NSInteger;
enum MXRoomCapabilitySupportType : NSInteger;

/// Used to know current homeserver capabilities as per <a href="https://sending.network/docs/spec/client_server/r0.6.1#get-sendingnetwork-client-r0-capabilities">sending.network specifications</a>
/// and <a href="https://github.com/sending-network/sendingnetwork-doc/pull/3244">MSC3244</a>
SWIFT_CLASS("_TtC17SendingnetworkSDK31MXHomeserverCapabilitiesService")
@interface MXHomeserverCapabilitiesService : NSObject
/// True if service succesfully read capabilities from the homeserver. False otherwise.
@property (nonatomic, readonly) BOOL isInitialised;
- (nonnull instancetype)initWithSession:(MXSession * _Nonnull)session OBJC_DESIGNATED_INITIALIZER;
/// Force the instance to request its capabilities to the server
/// \param completion A closure called when the operation completes.
///
- (void)updateWithCompletion:(void (^ _Nullable)(void))completion;
/// True if it is possible to change the password of the account.
@property (nonatomic, readonly) BOOL canChangePassword;
/// Check if a feature is supported by the homeserver.
/// \param feature Type of the room capability
///
///
/// returns:
///
/// <ul>
///   <li>
///     <code>unknown</code> if the server does not implement room caps
///   </li>
///   <li>
///     <code>unsupported</code> if this feature is not supported
///   </li>
///   <li>
///     <code>supported</code> if this feature is supported by a stable version
///   </li>
///   <li>
///     <code>supportedUnstable</code> if this feature is supported by an unstable version (should only be used for dev/experimental purpose).
///   </li>
/// </ul>
- (enum MXRoomCapabilitySupportType)isFeatureSupported:(enum MXRoomCapabilityType)feature SWIFT_WARN_UNUSED_RESULT;
/// Check if a feature is supported by the homeserver and for a given room version
/// \param feature Type of the room capability
///
/// \param roomVersion Given version of the room
///
///
/// returns:
/// <code>true</code> if the feature is supported, <code>false</code> otherwise
- (BOOL)isFeatureSupported:(enum MXRoomCapabilityType)feature by:(NSString * _Nonnull)roomVersion SWIFT_WARN_UNUSED_RESULT;
/// Use this method to know if you should force a version when creating a room that requires this feature.
/// You can also use #isFeatureSupported prior to this call to check if the feature is supported and report some feedback to user.
/// \param feature Type of the room capability
///
///
/// returns:
/// The room version if the given feature is supported by the home server
- (NSString * _Nullable)versionOverrideForFeature:(enum MXRoomCapabilityType)feature SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class MXHomeserverCapabilities;

@interface MXHomeserverCapabilitiesService (SWIFT_EXTENSION(SendingnetworkSDK))
/// Update the instance with given server capabilities (only for test purpose)
/// \param capabilities new homeserver capabilities
///
- (void)updateWith:(MXHomeserverCapabilities * _Nullable)capabilities;
@end





/// Protocol used to monitor events of a specific session
SWIFT_PROTOCOL("_TtP17SendingnetworkSDK19MXLiveEventListener_")
@protocol MXLiveEventListener
/// Monitor changes to session state
- (void)onSessionStateChangedWithState:(MXSessionState)state;
/// Monitor decryption attempts
- (void)onLiveEventDecryptionAttemptedWithEvent:(MXEvent * _Nonnull)event result:(MXEventDecryptionResult * _Nonnull)result;
/// Monitor to device events
- (void)onLiveToDeviceEventWithEvent:(MXEvent * _Nonnull)event;
@end


/// MXLocationService handles live location sharing
/// Note: Cannot use a protocol because of Objective-C compatibility
SWIFT_CLASS("_TtC17SendingnetworkSDK17MXLocationService")
@interface MXLocationService : NSObject
- (nonnull instancetype)initWithSession:(MXSession * _Nonnull)session OBJC_DESIGNATED_INITIALIZER;
/// Check if the current user is sharing is location in a room
/// \param roomId The room id
///
///
/// returns:
/// true if the user if sharing is location
- (BOOL)isCurrentUserSharingLocationInRoomWithId:(NSString * _Nonnull)roomId SWIFT_WARN_UNUSED_RESULT;
/// Check if the current user is sharing is location in a room and the sharing is not expired
/// \param roomId The room id
///
///
/// returns:
/// true if the user if sharing is location
- (BOOL)isCurrentUserSharingActiveLocationInRoomWithId:(NSString * _Nonnull)roomId SWIFT_WARN_UNUSED_RESULT;
/// Get all beacon info in a room
/// \param roomId The room id of the room
///
/// \param completion Closure called when beacon fetching as ended. Give beacon info array as a result.
///
- (void)getAllBeaconInfoInRoomWithId:(NSString * _Nonnull)roomId completion:(void (^ _Nonnull)(NSArray<MXBeaconInfo *> * _Nonnull))completion;
/// Get all beacon info of a user in a room
/// \param userId The user id
///
/// \param roomId The room id
///
/// \param completion Closure called when beacon fetching as ended. Give beacon info array as a result.
///
- (void)getAllBeaconInfoForUserId:(NSString * _Nonnull)userId inRoomWithId:(NSString * _Nonnull)roomId completion:(void (^ _Nonnull)(NSArray<MXBeaconInfo *> * _Nonnull))completion;
- (void)getAllBeaconInfoForCurrentUserInRoomWithId:(NSString * _Nonnull)roomId completion:(void (^ _Nonnull)(NSArray<MXBeaconInfo *> * _Nonnull))completion;
/// Get all beacon info summaries in a room
/// \param roomId The room id of the room
///
///
/// returns:
/// Room beacon info summaries
- (NSArray<id <MXBeaconInfoSummaryProtocol>> * _Nonnull)getBeaconInfoSummariesInRoomWithId:(NSString * _Nonnull)roomId SWIFT_WARN_UNUSED_RESULT;
/// Get all beacon info summaries in a room for a user
/// \param roomId The room id of the room
///
/// \param userId The user id
///
///
/// returns:
/// Room beacon info summaries
- (NSArray<id <MXBeaconInfoSummaryProtocol>> * _Nonnull)getBeaconInfoSummariesFor:(NSString * _Nonnull)userId inRoomWithId:(NSString * _Nonnull)roomId SWIFT_WARN_UNUSED_RESULT;
/// Get all beacon info summaries for a user
/// \param userId The user id
///
///
/// returns:
/// Room beacon info summaries
- (NSArray<id <MXBeaconInfoSummaryProtocol>> * _Nonnull)getBeaconInfoSummariesFor:(NSString * _Nonnull)userId SWIFT_WARN_UNUSED_RESULT;
/// Get all live beacon info summaries in a room
/// \param roomId The room id of the room
///
///
/// returns:
/// Room live beacon info summaries
- (NSArray<id <MXBeaconInfoSummaryProtocol>> * _Nonnull)getLiveBeaconInfoSummariesInRoomWithId:(NSString * _Nonnull)roomId SWIFT_WARN_UNUSED_RESULT;
/// Get all beacon info summaries in a room for a user
/// \param userId The user id
///
/// \param roomId The room id of the room
///
///
/// returns:
/// Room beacon info summaries
- (NSArray<id <MXBeaconInfoSummaryProtocol>> * _Nonnull)getLiveBeaconInfoSummariesFor:(NSString * _Nonnull)userId inRoomWithId:(NSString * _Nonnull)roomId SWIFT_WARN_UNUSED_RESULT;
/// Get all active (live and not expired) beacon info summaries in a room.
/// \param roomId The room id of the room
///
///
/// returns:
/// Room live beacon info summaries
- (NSArray<id <MXBeaconInfoSummaryProtocol>> * _Nonnull)getActiveBeaconInfoSummariesInRoomWithId:(NSString * _Nonnull)roomId SWIFT_WARN_UNUSED_RESULT;
/// Get all active (live and not expired) beacon info summaries in a room for a user.
/// \param userId The user id
///
/// \param roomId The room id of the room
///
///
/// returns:
/// Room live beacon info summaries
- (NSArray<id <MXBeaconInfoSummaryProtocol>> * _Nonnull)getActiveBeaconInfoSummariesFor:(NSString * _Nonnull)userId inRoomWithId:(NSString * _Nonnull)roomId SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isSomeoneSharingLiveLocationInRoomWithId:(NSString * _Nonnull)roomId SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isSomeoneSharingActiveLocationInRoomWithId:(NSString * _Nonnull)roomId SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface MXLocationService (SWIFT_EXTENSION(SendingnetworkSDK))
/// Start live location sharing for current user
/// \param roomId The roomId where the location should be shared
///
/// \param description The location description
///
/// \param timeout The location sharing duration
///
/// \param success A closure called when the operation is complete. Provides the event id of the event generated on the home server on success.
///
/// \param failure A closure called  when the operation fails.
///
///
/// returns:
/// a <code>MXHTTPOperation</code> instance.
- (MXHTTPOperation * _Nullable)startUserLocationSharingWithRoomId:(NSString * _Nonnull)roomId description:(NSString * _Nonnull)description timeout:(NSTimeInterval)timeout success:(void (^ _Nonnull)(NSString * _Nonnull))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
@end

@class MXLogConfiguration;

/// Logging utility that provies multiple logging levels as well as file output and rolling.
/// Its purpose is to provide a common entry for customizing logging and should be used throughout the code.
/// Please see <code>MXLog.h</code> for Objective-C options.
SWIFT_CLASS("_TtC17SendingnetworkSDK5MXLog")
@interface MXLog : NSObject
/// Method used to customize MXLog’s behavior.
/// Called automatically when first accessing the logger with the default values.
/// Please see <code>MXLogConfiguration</code> for all available options.
/// \param configuration the <code>MXLogConfiguration</code> instance to use
///
+ (void)configure:(MXLogConfiguration * _Nonnull)configuration;
+ (void)logVerbose:(NSString * _Nonnull)message file:(NSString * _Nonnull)file function:(NSString * _Nonnull)function line:(NSInteger)line;
+ (void)logDebug:(NSString * _Nonnull)message file:(NSString * _Nonnull)file function:(NSString * _Nonnull)function line:(NSInteger)line;
+ (void)logInfo:(NSString * _Nonnull)message file:(NSString * _Nonnull)file function:(NSString * _Nonnull)function line:(NSInteger)line;
+ (void)logWarning:(NSString * _Nonnull)message file:(NSString * _Nonnull)file function:(NSString * _Nonnull)function line:(NSInteger)line;
+ (void)logError:(NSString * _Nonnull)message file:(NSString * _Nonnull)file function:(NSString * _Nonnull)function line:(NSInteger)line;
+ (void)logFailure:(NSString * _Nonnull)message file:(NSString * _Nonnull)file function:(NSString * _Nonnull)function line:(NSInteger)line;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

enum MXLogLevel : NSUInteger;

/// Various MXLog configuration options. Used in conjunction with <code>MXLog.configure()</code>
SWIFT_CLASS("_TtC17SendingnetworkSDK18MXLogConfiguration")
@interface MXLogConfiguration : NSObject
/// the desired log level. <code>.verbose</code> by default.
@property (nonatomic) enum MXLogLevel logLevel;
/// whether logs should be written directly to files. <code>false</code> by default.
@property (nonatomic) BOOL redirectLogsToFiles;
/// the maximum total space to use for log files in bytes. <code>100MB</code> by default.
@property (nonatomic) NSUInteger logFilesSizeLimit;
/// the maximum number of log files to use before rolling. <code>50</code> by default.
@property (nonatomic) NSUInteger maxLogFilesCount;
/// the subname for log files. Files will be named as ‘console-[subLogName].log’. <code>nil</code> by default
@property (nonatomic, copy) NSString * _Nullable subLogName;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// MXLog logging levels. Use .none to disable logging entirely.
typedef SWIFT_ENUM(NSUInteger, MXLogLevel, closed) {
  MXLogLevelNone = 0,
  MXLogLevelVerbose = 1,
  MXLogLevelDebug = 2,
  MXLogLevelInfo = 3,
  MXLogLevelWarning = 4,
  MXLogLevelError = 5,
};


/// Util class to log memory footprint and allocate memory for debugging purposes.
SWIFT_CLASS("_TtC17SendingnetworkSDK8MXMemory")
@interface MXMemory : NSObject
/// Formatted memory footprint for debugging purposes
///
/// returns:
/// Memory footprint in MBs as a readable string
+ (NSString * _Nonnull)formattedMemoryFootprint SWIFT_WARN_UNUSED_RESULT;
+ (NSUInteger)memoryAvailable SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)formattedMemoryAvailable SWIFT_WARN_UNUSED_RESULT;
/// Allocates some memory
/// \param numberOfBytes Amount of memory to be allocated, in number of bytes
///
+ (void)allocateMemoryOfSizeWithNumberOfBytes:(NSInteger)numberOfBytes;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class MXKeysQueryResponse;
@class NSError;

@interface MXRestClient (SWIFT_EXTENSION(SendingnetworkSDK))
/// Download users keys by chunks.
/// \param users list of users to get keys for.
///
/// \param token sync token to pass in the query request, to help.
///
/// \param chunkSize max number of users to ask for in one CS API request.
///
/// \param success A block object called when the operation succeeds.
///
/// \param failure A block object called when the operation fails.
///
///
/// returns:
/// a MXHTTPOperation instance.
- (MXHTTPOperation * _Nonnull)downloadKeysByChunkForUsers:(NSArray<NSString *> * _Nonnull)users token:(NSString * _Nullable)token chunkSize:(NSInteger)chunkSize success:(void (^ _Nonnull)(MXKeysQueryResponse * _Nonnull))success failure:(void (^ _Nonnull)(NSError * _Nullable))failure SWIFT_WARN_UNUSED_RESULT;
@end




/// Describe the type of support for a given feature
typedef SWIFT_ENUM(NSInteger, MXRoomCapabilitySupportType, closed) {
/// the feature is supported by a stable version
  MXRoomCapabilitySupportTypeSupported = 0,
/// the feature is supported by an unstable version (should only be used for dev/experimental purpose).
  MXRoomCapabilitySupportTypeSupportedUnstable = 1,
/// the feature is not supported
  MXRoomCapabilitySupportTypeUnsupported = 2,
/// the server does not implement room caps
  MXRoomCapabilitySupportTypeUnknown = 3,
};

/// All types of features (objective-C support)
typedef SWIFT_ENUM(NSInteger, MXRoomCapabilityType, closed) {
/// knocking join rule support <a href="https://github.com/sending-network/sendingnetwork-doc/pull/2403">MSC2403</a>
  MXRoomCapabilityTypeKnock = 0,
/// restricted join rule support <a href="https://github.com/sending-network/sendingnetwork-doc/pull/3083">MSC3083</a>
  MXRoomCapabilityTypeRestricted = 1,
};


/// MXRoomCapabilityTypeMapper enables to get the corresponding room capability type from a room capability type string and the other way around.
SWIFT_CLASS("_TtC17SendingnetworkSDK26MXRoomCapabilityTypeMapper")
@interface MXRoomCapabilityTypeMapper : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// MXRoomInitialStateEventBuilder enables to build initial state events
SWIFT_CLASS("_TtC17SendingnetworkSDK30MXRoomInitialStateEventBuilder")
@interface MXRoomInitialStateEventBuilder : NSObject
/// Build avatar state event
/// \param avatarURL The mxc url of the avatar
///
///
/// returns:
/// State event dictionary
- (NSDictionary<NSString *, id> * _Nonnull)buildAvatarEventWithAvatarURL:(NSString * _Nonnull)avatarURL SWIFT_WARN_UNUSED_RESULT;
/// Build algorithm access state event
/// \param algorithm The encryption algorithm
///
///
/// returns:
/// State event dictionary
- (NSDictionary<NSString *, id> * _Nonnull)buildAlgorithmEventWithAlgorithm:(NSString * _Nonnull)algorithm SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NSEntityDescription;
@class NSManagedObjectContext;

SWIFT_CLASS_NAMED("MXRoomLastMessageMO")
@interface MXRoomLastMessageMO : NSManagedObject
@property (nonatomic, copy) NSString * _Nonnull s_eventId;
@property (nonatomic) uint64_t s_originServerTs;
@property (nonatomic) BOOL s_isEncrypted;
@property (nonatomic, copy) NSString * _Nonnull s_sender;
@property (nonatomic, copy) NSString * _Nullable s_text;
@property (nonatomic, copy) NSData * _Nullable s_attributedText;
@property (nonatomic, copy) NSData * _Nullable s_others;
- (nonnull instancetype)initWithEntity:(NSEntityDescription * _Nonnull)entity insertIntoManagedObjectContext:(NSManagedObjectContext * _Nullable)context OBJC_DESIGNATED_INITIALIZER;
@end

@protocol MXRoomListDataCounts;

SWIFT_CLASS("_TtC17SendingnetworkSDK14MXRoomListData")
@interface MXRoomListData : NSObject
/// Array of rooms
@property (nonatomic, readonly, copy) NSArray<id <MXRoomSummaryProtocol>> * _Nonnull rooms;
/// Counts on the data
@property (nonatomic, readonly, strong) id <MXRoomListDataCounts> _Nonnull counts;
/// Current page. Zero-based. 0 if pagination disabled
@property (nonatomic, readonly) NSInteger currentPage;
/// Flag to indicate whether more rooms exist in next pages
@property (nonatomic, readonly) BOOL hasMoreRooms;
/// Get room at index
/// \param index index
///
///
/// returns:
/// room
- (id <MXRoomSummaryProtocol> _Nonnull)roomAtIndex:(NSInteger)index SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_PROTOCOL("_TtP17SendingnetworkSDK20MXRoomListDataCounts_")
@protocol MXRoomListDataCounts
/// Number of rooms handled by this instance
@property (nonatomic, readonly) NSInteger numberOfRooms;
/// Number of handled rooms having unsent message(s)
@property (nonatomic, readonly) NSInteger numberOfUnsentRooms;
/// Number of handled rooms being notified
@property (nonatomic, readonly) NSInteger numberOfNotifiedRooms;
/// Number of handled rooms being highlighted
@property (nonatomic, readonly) NSInteger numberOfHighlightedRooms;
/// Sum of notification counts for handled rooms
@property (nonatomic, readonly) NSUInteger numberOfNotifications;
/// Sum of highlight counts for handled rooms
@property (nonatomic, readonly) NSUInteger numberOfHighlights;
/// Number of invited rooms for handled rooms
@property (nonatomic, readonly) NSInteger numberOfInvitedRooms;
/// Total values. nil if pagination is not enabled.
@property (nonatomic, readonly, strong) id <MXRoomListDataCounts> _Nullable total;
@end


SWIFT_CLASS("_TtC17SendingnetworkSDK26MXRoomListDataFetchOptions")
@interface MXRoomListDataFetchOptions : NSObject
/// Flag indicating the fetch should be performed in async
@property (nonatomic, readonly) BOOL async;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@protocol MXRoomListDataFetcherDelegate;

SWIFT_PROTOCOL("_TtP17SendingnetworkSDK21MXRoomListDataFetcher_")
@protocol MXRoomListDataFetcher
/// Fethc options
@property (nonatomic, readonly, strong) MXRoomListDataFetchOptions * _Nonnull fetchOptions;
/// Currently fetched data
@property (nonatomic, readonly, strong) MXRoomListData * _Nullable data;
/// Add delegate from the fetcher
/// \param delegate delegate
///
- (void)addDelegate:(id <MXRoomListDataFetcherDelegate> _Nonnull)delegate;
/// Remove delegate from the fetcher
/// \param delegate delegate
///
- (void)removeDelegate:(id <MXRoomListDataFetcherDelegate> _Nonnull)delegate;
/// Remove all delegates from the fetcher
- (void)removeAllDelegates;
/// Load data for the first time or load the next page
- (void)paginate;
/// Reset pagination index
- (void)resetPagination;
/// Load data from start again
- (void)refresh;
/// Stop all services. Do not use the fetcher after stopped
- (void)stop;
@end


SWIFT_PROTOCOL("_TtP17SendingnetworkSDK29MXRoomListDataFetcherDelegate_")
@protocol MXRoomListDataFetcherDelegate
/// Delegate method to be called when fetched data updated
/// \param fetcher fetcher
///
/// \param totalCountsChanged true if the total counts changed or pagination disabled 
///
- (void)fetcherDidChangeData:(id <MXRoomListDataFetcher> _Nonnull)fetcher totalCountsChanged:(BOOL)totalCountsChanged;
@end



SWIFT_CLASS_NAMED("MXRoomMembersCountMO")
@interface MXRoomMembersCountMO : NSManagedObject
@property (nonatomic) int32_t s_members;
@property (nonatomic) int32_t s_joined;
@property (nonatomic) int32_t s_invited;
- (nonnull instancetype)initWithEntity:(NSEntityDescription * _Nonnull)entity insertIntoManagedObjectContext:(NSManagedObjectContext * _Nullable)context OBJC_DESIGNATED_INITIALIZER;
@end



@class MXUsersTrustLevelSummaryMO;

SWIFT_CLASS_NAMED("MXRoomSummaryMO")
@interface MXRoomSummaryMO : NSManagedObject
@property (nonatomic, copy) NSString * _Nonnull s_identifier;
@property (nonatomic, copy) NSString * _Nullable s_typeString;
@property (nonatomic) int16_t s_typeInt;
@property (nonatomic, copy) NSString * _Nullable s_avatar;
@property (nonatomic, copy) NSString * _Nullable s_displayName;
@property (nonatomic, copy) NSString * _Nullable s_topic;
@property (nonatomic, copy) NSString * _Nonnull s_creatorUserId;
@property (nonatomic, copy) NSString * _Nullable s_aliases;
@property (nonatomic, copy) NSString * _Nullable s_historyVisibility;
@property (nonatomic, copy) NSString * _Nullable s_joinRule;
@property (nonatomic) int16_t s_membershipInt;
@property (nonatomic) int16_t s_membershipTransitionStateInt;
@property (nonatomic) BOOL s_isConferenceUserRoom;
@property (nonatomic, copy) NSData * _Nullable s_others;
@property (nonatomic) BOOL s_isEncrypted;
@property (nonatomic) int16_t s_localUnreadEventCount;
@property (nonatomic) int16_t s_localUnreadMentionMeEventCount;
@property (nonatomic) int16_t s_notificationCount;
@property (nonatomic) int16_t s_highlightCount;
@property (nonatomic) BOOL s_hasAnyUnread;
@property (nonatomic) BOOL s_hasMentionMe;
@property (nonatomic) BOOL s_hasAnyNotification;
@property (nonatomic) BOOL s_hasAnyHighlight;
@property (nonatomic, copy) NSString * _Nullable s_directUserId;
@property (nonatomic) BOOL s_hiddenFromUser;
@property (nonatomic) int64_t s_storedHash;
@property (nonatomic, copy) NSString * _Nullable s_favoriteTagOrder;
@property (nonatomic) int64_t s_dataTypesInt;
@property (nonatomic) int16_t s_sentStatusInt;
@property (nonatomic, copy) NSString * _Nullable s_parentSpaceIds;
@property (nonatomic, strong) MXRoomMembersCountMO * _Nullable s_membersCount;
@property (nonatomic, strong) MXUsersTrustLevelSummaryMO * _Nullable s_trust;
@property (nonatomic, strong) MXRoomLastMessageMO * _Nullable s_lastMessage;
@property (nonatomic, copy) NSString * _Nullable s_userIdsSharingLiveBeacon;
- (nonnull instancetype)initWithEntity:(NSEntityDescription * _Nonnull)entity insertIntoManagedObjectContext:(NSManagedObjectContext * _Nullable)context OBJC_DESIGNATED_INITIALIZER;
@end

@class MXRoomMembersCount;
@class MXRoomLastMessage;
@protocol NSCoding;
@class MXSpaceChildInfo;

@interface MXRoomSummaryMO (SWIFT_EXTENSION(SendingnetworkSDK)) <MXRoomSummaryProtocol>
@property (nonatomic, readonly, copy) NSString * _Nonnull roomId;
@property (nonatomic, readonly, copy) NSString * _Nullable roomTypeString;
@property (nonatomic, readonly) MXRoomType roomType;
@property (nonatomic, readonly, copy) NSString * _Nullable avatar;
@property (nonatomic, readonly, copy) NSString * _Nullable displayname;
@property (nonatomic, readonly, copy) NSString * _Nullable topic;
@property (nonatomic, readonly, copy) NSString * _Nonnull creatorUserId;
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nonnull aliases;
@property (nonatomic, readonly, copy) NSString * _Nullable historyVisibility;
@property (nonatomic, readonly, copy) NSString * _Nullable joinRule;
@property (nonatomic, readonly) MXMembership membership;
@property (nonatomic, readonly) MXMembershipTransitionState membershipTransitionState;
@property (nonatomic, readonly, strong) MXRoomMembersCount * _Nonnull membersCount;
@property (nonatomic, readonly) BOOL isConferenceUserRoom;
@property (nonatomic, readonly) BOOL hiddenFromUser;
@property (nonatomic, readonly) NSUInteger storedHash;
@property (nonatomic, readonly, strong) MXRoomLastMessage * _Nullable lastMessage;
@property (nonatomic, readonly) BOOL isEncrypted;
@property (nonatomic, readonly) NSUInteger localUnreadEventCount;
@property (nonatomic, readonly) NSUInteger localUnreadMetionMeEventCount;
@property (nonatomic, readonly) NSUInteger notificationCount;
@property (nonatomic, readonly) NSUInteger highlightCount;
@property (nonatomic, readonly) BOOL hasAnyUnread;
@property (nonatomic, readonly) BOOL hasMetionMe;
@property (nonatomic, readonly) BOOL hasAnyNotification;
@property (nonatomic, readonly) BOOL hasAnyHighlight;
@property (nonatomic, readonly) BOOL isDirect;
@property (nonatomic, readonly, copy) NSString * _Nullable directUserId;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id <NSCoding>> * _Nullable others;
@property (nonatomic, readonly, copy) NSString * _Nullable favoriteTagOrder;
@property (nonatomic, readonly) MXRoomSummaryDataTypes dataTypes;
- (BOOL)isTyped:(MXRoomSummaryDataTypes)types SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) MXRoomSummarySentStatus sentStatus;
@property (nonatomic, readonly, strong) MXSpaceChildInfo * _Nullable spaceChildInfo;
@property (nonatomic, readonly, copy) NSSet<NSString *> * _Nonnull parentSpaceIds;
@property (nonatomic, readonly, strong) MXUsersTrustLevelSummary * _Nullable trust;
@property (nonatomic, readonly, copy) NSSet<NSString *> * _Nonnull userIdsSharingLiveBeacon;
@end


/// MXRoomTypeMapper enables to get the corresponding room type from a room type string
SWIFT_CLASS("_TtC17SendingnetworkSDK16MXRoomTypeMapper")
@interface MXRoomTypeMapper : NSObject
/// Default room type used when the given room type string is nil or empty
@property (nonatomic) MXRoomType defaultRoomType;
- (nonnull instancetype)initWithDefaultRoomType:(MXRoomType)defaultRoomType OBJC_DESIGNATED_INITIALIZER;
- (MXRoomType)roomTypeFrom:(NSString * _Nullable)roomTypeString SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



@protocol MXSharedHistoryKeyService;
@protocol MXEventsEnumerator;

/// Manager responsible for sharing keys of messages in a room with an invited user
/// The intent of sharing keys with different users on invite is to allow them to see any immediate
/// context of the conversation that may have led to the invite. The amount of keys to be shared
/// is configurable, based on the number of messages that should be readable.
/// Note that after the initial key share by the inviting user, there is no mechanism by which the invited
/// user can request additional keys. There is also no retry mechanism if any of the initial key sharing fails.
SWIFT_CLASS("_TtC17SendingnetworkSDK25MXSharedHistoryKeyManager")
@interface MXSharedHistoryKeyManager : NSObject
- (nonnull instancetype)initWithRoomId:(NSString * _Nonnull)roomId crypto:(MXCrypto * _Nonnull)crypto service:(id <MXSharedHistoryKeyService> _Nonnull)service OBJC_DESIGNATED_INITIALIZER;
- (void)shareMessageKeysWithUserId:(NSString * _Nonnull)userId messageEnumerator:(id <MXEventsEnumerator> _Nonnull)messageEnumerator limit:(NSInteger)limit;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Request to share the key for a given <code>sessionId</code> and <code>senderKey</code>
/// with selected user and all of their devices
SWIFT_CLASS("_TtC17SendingnetworkSDK25MXSharedHistoryKeyRequest")
@interface MXSharedHistoryKeyRequest : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull userId;
@property (nonatomic, readonly, copy) NSArray<MXDeviceInfo *> * _Nonnull devices;
@property (nonatomic, readonly, copy) NSString * _Nonnull roomId;
@property (nonatomic, readonly, copy) NSString * _Nonnull sessionId;
@property (nonatomic, readonly, copy) NSString * _Nonnull senderKey;
- (nonnull instancetype)initWithUserId:(NSString * _Nonnull)userId devices:(NSArray<MXDeviceInfo *> * _Nonnull)devices roomId:(NSString * _Nonnull)roomId sessionId:(NSString * _Nonnull)sessionId senderKey:(NSString * _Nonnull)senderKey OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class MXRoomSummary;

/// A Sendingnetwork space enables to collect rooms together into groups. Such collections of rooms are referred as “spaces” (see https://github.com/sending-network/sendingnetwork-doc/blob/matthew/msc1772/proposals/1772-groups-as-rooms.md).
SWIFT_CLASS("_TtC17SendingnetworkSDK7MXSpace")
@interface MXSpace : NSObject
/// The underlying room
@property (nonatomic, readonly, strong) MXSession * _Nonnull session;
/// ID of the space (e.g. ID of the underlying room)
@property (nonatomic, readonly, copy) NSString * _Nonnull spaceId;
/// Underlynig room of the space
@property (nonatomic, readonly, strong) MXRoom * _Nullable room;
/// Shortcut to the room summary
@property (nonatomic, readonly, strong) MXRoomSummary * _Nullable summary;
@property (nonatomic, readonly, copy) NSArray<MXSpace *> * _Nonnull childSpaces;
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nonnull childRoomIds;
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nonnull otherMembersId;
@property (nonatomic, readonly, copy) NSSet<NSString *> * _Nonnull suggestedRoomIds;
@property (nonatomic, readonly, copy) NSString * _Nullable order;
- (nonnull instancetype)initWithRoomId:(NSString * _Nonnull)roomId session:(MXSession * _Nonnull)session OBJC_DESIGNATED_INITIALIZER;
/// Update children and members from room states and members
/// \param completion A closure called when the operation completes.
///
- (void)readChildRoomsAndMembersWithCompletion:(void (^ _Nonnull)(void))completion;
/// Update child spaces using the list of spaces
/// \param spacesPerId complete list of spaces by space ID
///
- (void)updateChildSpacesWith:(NSDictionary<NSString *, MXSpace *> * _Nonnull)spacesPerId;
/// Update child rooms using the list of direct rooms
/// \param directRoomsPerMember complete list of direct rooms by member ID
///
- (void)updateChildDirectRoomsWith:(NSDictionary<NSString *, NSArray<NSString *> *> * _Nonnull)directRoomsPerMember;
/// Check if the room identified with an ID is a child of the space
/// \param roomId The room id of the potential child room.
///
///
/// returns:
/// <code>true</code> if the room identified is a child, <code>false</code> atherwise
- (BOOL)isRoomAChildWithRoomId:(NSString * _Nonnull)roomId SWIFT_WARN_UNUSED_RESULT;
/// Check if the current user has enough power level to add room to this space
/// \param completion A closure called when the operation completes.
///
/// \param canAddRoom Indicates wether the user has right or not to add rooms to this space
///
- (void)canAddRoomWithCompletion:(void (^ _Nonnull)(BOOL))completion;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface MXSpace (SWIFT_EXTENSION(SendingnetworkSDK))
/// Add child space or child room to the current space.
/// \param roomId The room id of the child space or child room.
///
/// \param viaServers List of candidate servers that can be used to join the space. Children where via is not present are ignored.
/// If nil value is set current homeserver will be used as via server.
///
/// \param order Is a string which is used to provide a default ordering of siblings in the room list. Orders should be a string of ascii characters in the range \x20 (space) to \x7F (~), and should be less or equal 50 characters.
///
/// \param autoJoin Allows a space admin to list the sub-spaces and rooms in that space which should be automatically joined by members of that space.
///
/// \param suggested Indicates that the child should be advertised to members of the space by the client. This could be done by showing them eagerly in the room list.
///
/// \param success A closure called when the operation is complete. Provides the event id of the event generated on the home server on success.
///
/// \param failure A closure called  when the operation fails.
///
///
/// returns:
/// a <code>MXHTTPOperation</code> instance.
- (MXHTTPOperation * _Nullable)addChildWithRoomId:(NSString * _Nonnull)roomId viaServers:(NSArray<NSString *> * _Nullable)viaServers order:(NSString * _Nullable)order autoJoin:(BOOL)autoJoin suggested:(BOOL)suggested success:(void (^ _Nonnull)(NSString * _Nullable))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
@end


/// MXSpaceChildInfo represents space child summary informations.
SWIFT_CLASS("_TtC17SendingnetworkSDK16MXSpaceChildInfo")
@interface MXSpaceChildInfo : NSObject
/// The room id of the child
@property (nonatomic, copy) NSString * _Nonnull childRoomId;
/// True to indicate that the space is known.
/// We might not know this child at all, i.e we just know it exists but no info on type/name/etc..
@property (nonatomic, readonly) BOOL isKnown;
/// The room type string value as provided by the server. Can be nil.
@property (nonatomic, readonly, copy) NSString * _Nullable roomTypeString;
/// The locally computed room type derivated from <code>roomTypeString</code>.
@property (nonatomic, readonly) MXRoomType roomType;
/// The space name.
@property (nonatomic, readonly, copy) NSString * _Nullable name;
/// The space topic.
@property (nonatomic, readonly, copy) NSString * _Nullable topic;
/// the canonical alias
@property (nonatomic, readonly, copy) NSString * _Nullable canonicalAlias;
/// The Sendingnetwork content URI of the space avatar.
@property (nonatomic, readonly, copy) NSString * _Nullable avatarUrl;
/// The number of members joined to the room.
@property (nonatomic, readonly) NSInteger activeMemberCount;
/// Allows a space admin to list the sub-spaces and rooms in that space which should be automatically joined by members of that space.
@property (nonatomic, readonly) BOOL autoJoin;
/// <code>true</code> if the room is suggested. <code>false</code> otherwise.
@property (nonatomic, readonly) BOOL suggested;
/// List of children IDs
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nonnull childrenIds;
/// Display name of the space child
@property (nonatomic, readonly, copy) NSString * _Nullable displayName;
- (nonnull instancetype)initWithChildRoomId:(NSString * _Nonnull)childRoomId isKnown:(BOOL)isKnown roomTypeString:(NSString * _Nullable)roomTypeString roomType:(MXRoomType)roomType name:(NSString * _Nullable)name topic:(NSString * _Nullable)topic canonicalAlias:(NSString * _Nullable)canonicalAlias avatarUrl:(NSString * _Nullable)avatarUrl activeMemberCount:(NSInteger)activeMemberCount autoJoin:(BOOL)autoJoin suggested:(BOOL)suggested childrenIds:(NSArray<NSString *> * _Nonnull)childrenIds OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Space children request parameters
SWIFT_CLASS("_TtC17SendingnetworkSDK32MXSpaceChildrenRequestParameters")
@interface MXSpaceChildrenRequestParameters : NSObject
/// The maximum number of rooms/subspaces to return for a given space, if negative unbounded. default: -1
@property (nonatomic) NSInteger maxNumberOfRooms;
/// The maximum number of rooms/subspaces to return, server can override this, default: 100
@property (nonatomic) NSInteger limit;
/// The token returned in the previous response.
@property (nonatomic, copy) NSString * _Nullable nextBatch;
/// Optional. If true, return only child events and rooms where the org.sendingnetwork.msc1772.space.child event has suggested: true.
@property (nonatomic) BOOL suggestedRoomOnly;
- (NSDictionary * _Nonnull)jsonDictionary SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// MXSpaceChildrenSummary represents the wrapped result of the space API from MXSpaceService.
SWIFT_CLASS("_TtC17SendingnetworkSDK22MXSpaceChildrenSummary")
@interface MXSpaceChildrenSummary : NSObject
/// The queried space room summary. Can be nil in case of batched request
@property (nonatomic, readonly, strong) MXSpaceChildInfo * _Nullable spaceInfo;
/// The child summaries of the queried space
@property (nonatomic, readonly, copy) NSArray<MXSpaceChildInfo *> * _Nonnull childInfos;
/// The token to supply in the <code>from</code> param of the next request in order to request more rooms. If this is absent, there are no more results.
@property (nonatomic, readonly, copy) NSString * _Nullable nextBatch;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Parameters to create a space.
SWIFT_CLASS("_TtC17SendingnetworkSDK25MXSpaceCreationParameters")
@interface MXSpaceCreationParameters : MXRoomCreationParameters
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class MXSpaceNotificationState;

/// MXSpaceNotificationCounter compute the number of unread messages for each space
SWIFT_CLASS("_TtC17SendingnetworkSDK26MXSpaceNotificationCounter")
@interface MXSpaceNotificationCounter : NSObject
@property (nonatomic, readonly, strong) MXSpaceNotificationState * _Nonnull homeNotificationState;
- (nonnull instancetype)initWithSession:(MXSession * _Nonnull)session OBJC_DESIGNATED_INITIALIZER;
/// close the service and free all data
- (void)close;
/// Compute the notification count for every spaces
- (void)computeNotificationCount;
/// Notification state for a given space
/// \param spaceId ID of the space
///
///
/// returns:
/// a <code>MXSpaceNotificationState</code> instance with the number of notifications for the given space
- (MXSpaceNotificationState * _Nullable)notificationStateForSpaceWithId:(NSString * _Nonnull)spaceId SWIFT_WARN_UNUSED_RESULT;
/// Notification state for a all spaces except for a given space
/// \param spaceId ID of the space to be excluded
///
///
/// returns:
/// a <code>MXSpaceNotificationState</code> instance with the number of notifications for all spaces
- (MXSpaceNotificationState * _Nonnull)notificationStateForAllSpacesExcept:(NSString * _Nullable)spaceId SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface MXSpaceNotificationCounter (SWIFT_EXTENSION(SendingnetworkSDK))
/// Posted once notification count for all spaces has been updated
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSNotificationName _Nonnull didUpdateNotificationCount;)
+ (NSNotificationName _Nonnull)didUpdateNotificationCount SWIFT_WARN_UNUSED_RESULT;
@end


/// MXSpaceNotificationState stores the categorized number of unread messages
SWIFT_CLASS("_TtC17SendingnetworkSDK24MXSpaceNotificationState")
@interface MXSpaceNotificationState : NSObject
/// Number of unread messages in favourite rooms
@property (nonatomic) NSUInteger favouriteMissedDiscussionsCount;
/// Number of unread highlight messages in favourite rooms
@property (nonatomic) NSUInteger favouriteMissedDiscussionsHighlightedCount;
/// Number of unread messages in DM rooms
@property (nonatomic) NSUInteger directMissedDiscussionsCount;
/// Number of unread highlight messages in DM rooms
@property (nonatomic) NSUInteger directMissedDiscussionsHighlightedCount;
/// Number of unread messages in rooms other than DMs
@property (nonatomic) NSUInteger groupMissedDiscussionsCount;
/// Number of unread highlight message sin rooms other than DMs
@property (nonatomic) NSUInteger groupMissedDiscussionsHighlightedCount;
/// Number of all unread messages
@property (nonatomic, readonly) NSUInteger allCount;
/// Number of all unread highlight messages
@property (nonatomic, readonly) NSUInteger allHighlightCount;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class MXSyncResponse;

/// MXSpaceService enables to handle spaces.
SWIFT_CLASS("_TtC17SendingnetworkSDK14MXSpaceService")
@interface MXSpaceService : NSObject
/// The instance of <code>MXSpaceNotificationCounter</code> that computes the number of unread messages for each space
@property (nonatomic, readonly, strong) MXSpaceNotificationCounter * _Nonnull notificationCounter;
/// List of <code>MXRoomSummary</code> of the high level spaces.
@property (nonatomic, readonly, copy) NSArray<MXRoomSummary *> * _Nonnull rootSpaceSummaries;
/// List of <code>MXRoomSummary</code> of all spaces known by the user.
@property (nonatomic, readonly, copy) NSArray<MXRoomSummary *> * _Nonnull spaceSummaries;
/// <code>true</code> if the <code>MXSpaceService</code> instance needs to be updated (e.g. the instance was busy while <code>handleSync</code> was called). <code>false</code> otherwise
@property (nonatomic, readonly) BOOL needsUpdate;
/// Set it to <code>false</code> if you want to temporarily disable graph update. This will be set automatically to <code>true</code> after next sync of the <code>MXSession</code>.
@property (nonatomic) BOOL graphUpdateEnabled;
/// List of ID of all the ancestors (direct parent spaces and parent spaces of the direct parent spaces) by room ID.
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSSet<NSString *> *> * _Nonnull ancestorsPerRoomId;
/// The <code>MXSpaceService</code> instance is initialised if a previously saved graph has been restored or after the first sync.
@property (nonatomic, readonly) BOOL isInitialised;
- (nonnull instancetype)initWithSession:(MXSession * _Nonnull)session OBJC_DESIGNATED_INITIALIZER;
/// close the service and free all data
- (void)close;
/// Loads graph from the given store
- (void)loadData;
/// Returns the set of direct parent IDs of the given room
/// \param roomId ID of the room
///
///
/// returns:
/// set of direct parent IDs of the given room. Empty set if the room has no parent.
- (NSSet<NSString *> * _Nonnull)directParentIdsOfRoomWithId:(NSString * _Nonnull)roomId SWIFT_WARN_UNUSED_RESULT;
/// Returns the set of direct parent IDs of the given room for which the room is suggested or not according to the request.
/// \param roomId ID of the room
///
/// \param suggested If <code>true</code> the method will return the parent IDs where the room is suggested. If <code>false</code>  the method will return the parent IDs where the room is NOT suggested
///
///
/// returns:
/// set of direct parent IDs of the given room. Empty set if the room has no parent.
- (NSSet<NSString *> * _Nonnull)directParentIdsOfRoomWithId:(NSString * _Nonnull)roomId whereRoomIsSuggested:(BOOL)suggested SWIFT_WARN_UNUSED_RESULT;
/// Allows to know if a given room is a descendant of a given space
/// \param roomId ID of the room
///
/// \param spaceId ID of the space
///
///
/// returns:
/// <code>true</code> if the room with the given ID is an ancestor of the space with the given ID .<code>false</code> otherwise
- (BOOL)isRoomWithId:(NSString * _Nonnull)roomId descendantOf:(NSString * _Nonnull)spaceId SWIFT_WARN_UNUSED_RESULT;
/// Allows to know if the room is oprhnaed (e.g. has no ancestor)
/// \param roomId ID of the room
///
///
/// returns:
/// <code>true</code> if the room with the given ID is orphaned .<code>false</code> otherwise
- (BOOL)isOrphanedRoomWithId:(NSString * _Nonnull)roomId SWIFT_WARN_UNUSED_RESULT;
/// Returns the first ancestor which is a root space
/// \param roomId ID of the room
///
///
/// returns:
/// Instance of the ancestor if found. <code>nil</code> otherwise
- (MXSpace * _Nullable)firstRootAncestorForRoomWithId:(NSString * _Nonnull)roomId SWIFT_WARN_UNUSED_RESULT;
/// Handle a sync response
/// \param syncResponse The sync response object
///
- (void)handleSyncResponse:(MXSyncResponse * _Nonnull)syncResponse;
/// Get a space from a roomId.
/// \param spaceId The id of the space.
///
///
/// returns:
/// A MXSpace with the associated roomId or null if room doesn’t exists or the room type is not space.
- (MXSpace * _Nullable)getSpaceWithId:(NSString * _Nonnull)spaceId SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface MXSpaceService (SWIFT_EXTENSION(SendingnetworkSDK))
/// Create a space.
/// \param parameters The parameters for space creation.
///
/// \param success A closure called when the operation is complete.
///
/// \param failure A closure called  when the operation fails.
///
///
/// returns:
/// a <code>MXHTTPOperation</code> instance.
- (MXHTTPOperation * _Nonnull)createSpaceWith:(MXSpaceCreationParameters * _Nonnull)parameters success:(void (^ _Nonnull)(MXSpace * _Nonnull))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure SWIFT_WARN_UNUSED_RESULT;
/// Create a space shortcut.
/// \param name The space name.
///
/// \param topic The space topic.
///
/// \param isPublic true to indicate to use public chat presets and join the space without invite or false to use private chat presets and join the space on invite.
///
/// \param aliasLocalPart local part of the alias
/// (e.g. for the alias “#my_alias:example.org”, the local part is “my_alias”)
///
/// \param inviteArray list of invited user IDs
///
/// \param success A closure called when the operation is complete.
///
/// \param failure A closure called  when the operation fails.
///
///
/// returns:
/// a <code>MXHTTPOperation</code> instance.
- (MXHTTPOperation * _Nonnull)createSpaceWithName:(NSString * _Nonnull)name topic:(NSString * _Nullable)topic isPublic:(BOOL)isPublic aliasLocalPart:(NSString * _Nullable)aliasLocalPart inviteArray:(NSArray<NSString *> * _Nullable)inviteArray success:(void (^ _Nonnull)(MXSpace * _Nonnull))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Get the space children informations of a given space from the server.
/// \param spaceId The room id of the queried space.
///
/// \param suggestedOnly If <code>true</code>, return only child events and rooms where the <code>m.space.child</code> event has <code>suggested: true</code>.
///
/// \param limit Optional. A limit to the maximum number of children to return per space. <code>-1</code> for no limit
///
/// \param maxDepth Optional. The maximum depth in the tree (from the root room) to return. <code>-1</code> for no limit
///
/// \param paginationToken Optional. Pagination token given to retrieve the next set of rooms.
///
/// \param success A closure called when the operation is complete.
///
/// \param failure A closure called  when the operation fails.
///
///
/// returns:
/// a <code>MXHTTPOperation</code> instance.
- (MXHTTPOperation * _Nonnull)getSpaceChildrenForSpaceWithId:(NSString * _Nonnull)spaceId suggestedOnly:(BOOL)suggestedOnly limit:(NSInteger)limit maxDepth:(NSInteger)maxDepth paginationToken:(NSString * _Nullable)paginationToken success:(void (^ _Nonnull)(MXSpaceChildrenSummary * _Nonnull))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
@end


@interface MXSpaceService (SWIFT_EXTENSION(SendingnetworkSDK))
/// Posted once the first graph as been built or loaded
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSNotificationName _Nonnull didInitialise;)
+ (NSNotificationName _Nonnull)didInitialise SWIFT_WARN_UNUSED_RESULT;
/// Posted once the graph of rooms is up and running
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSNotificationName _Nonnull didBuildSpaceGraph;)
+ (NSNotificationName _Nonnull)didBuildSpaceGraph SWIFT_WARN_UNUSED_RESULT;
@end

enum MXStopwatchMeasurementUnit : NSUInteger;

SWIFT_CLASS("_TtC17SendingnetworkSDK11MXStopwatch")
@interface MXStopwatch : NSObject
/// Initializer.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Measure time since last init/reset.
/// \param type Unit of measurement. See <code>StopwatchMeasurementUnit</code>.
///
///
/// returns:
/// Measured time in desired type.
- (NSTimeInterval)measureIn:(enum MXStopwatchMeasurementUnit)type SWIFT_WARN_UNUSED_RESULT;
/// Measure time since last init/reset and convert it into a readable string in the desired unit. Does not make convertions between units.
/// \param type Unit of measurement. See <code>StopwatchMeasurementUnit</code>.
///
///
/// returns:
/// User readable string with measured time.
- (NSString * _Nonnull)readableIn:(enum MXStopwatchMeasurementUnit)type SWIFT_WARN_UNUSED_RESULT;
/// Reset the stopwatch.
- (void)reset;
@end

/// Measurement unit for Stopwatch.
typedef SWIFT_ENUM(NSUInteger, MXStopwatchMeasurementUnit, closed) {
  MXStopwatchMeasurementUnitSeconds = 0,
  MXStopwatchMeasurementUnitMilliseconds = 1,
};


SWIFT_CLASS("_TtC17SendingnetworkSDK25MXStoreRoomListDataCounts")
@interface MXStoreRoomListDataCounts : NSObject <MXRoomListDataCounts>
@property (nonatomic, readonly) NSInteger numberOfRooms;
@property (nonatomic, readonly) NSInteger numberOfUnsentRooms;
@property (nonatomic, readonly) NSInteger numberOfNotifiedRooms;
@property (nonatomic, readonly) NSInteger numberOfHighlightedRooms;
@property (nonatomic, readonly) NSUInteger numberOfNotifications;
@property (nonatomic, readonly) NSUInteger numberOfHighlights;
@property (nonatomic, readonly) NSInteger numberOfInvitedRooms;
@property (nonatomic, strong) id <MXRoomListDataCounts> _Nullable total;
- (nonnull instancetype)initWithRooms:(NSArray<id <MXRoomSummaryProtocol>> * _Nonnull)rooms total:(id <MXRoomListDataCounts> _Nullable)total OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC17SendingnetworkSDK26MXStoreRoomListDataManager")
@interface MXStoreRoomListDataManager : NSObject <MXRoomListDataManager>
@property (nonatomic, weak) MXSession * _Nullable session;
- (void)configureWithSession:(MXSession * _Nonnull)session;
- (id <MXRoomListDataFetcher> _Nonnull)fetcherWithOptions:(MXRoomListDataFetchOptions * _Nonnull)options SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@protocol MXStore;
@class MXAggregations;
@class MXFileStore;

/// A class to help coordinate the session’s main store with any secondary
/// stores that it relies upon such as aggregations. It will ensure that actions
/// which need synchronisation (such as deleting all data) are handled properly.
SWIFT_CLASS("_TtC17SendingnetworkSDK14MXStoreService")
@interface MXStoreService : NSObject
@property (nonatomic, readonly, strong) id <MXStore> _Nonnull mainStore;
@property (nonatomic, strong) MXAggregations * _Nullable aggregations;
- (nonnull instancetype)initWithStore:(id <MXStore> _Nonnull)store credentials:(MXCredentials * _Nonnull)credentials OBJC_DESIGNATED_INITIALIZER;
/// Reset any secondary stores in the service. This should be called by the main
/// store if it is permanent, in order to keep all of the data in sync across stores.
/// \param sender The file store that is about to delete its data.
///
- (void)resetSecondaryStoresWithSender:(MXFileStore * _Nonnull)sender;
/// Close all stores in the service.
- (void)closeStores;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC17SendingnetworkSDK23MXSyncResponseFileStore")
@interface MXSyncResponseFileStore : NSObject
- (nonnull instancetype)initWithCredentials:(MXCredentials * _Nonnull)credentials OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class MXCachedSyncResponse;

/// Protocol defining the storage for a sync response.
SWIFT_PROTOCOL("_TtP17SendingnetworkSDK19MXSyncResponseStore_")
@protocol MXSyncResponseStore <NSObject>
/// CRUD interface for cached sync responses
- (NSString * _Nonnull)addSyncResponseWithSyncResponse:(MXCachedSyncResponse * _Nonnull)syncResponse;
- (MXCachedSyncResponse * _Nullable)syncResponseWithId:(NSString * _Nonnull)id error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)syncResponseSizeWithId:(NSString * _Nonnull)id SWIFT_WARN_UNUSED_RESULT;
- (void)updateSyncResponseWithId:(NSString * _Nonnull)id syncResponse:(MXCachedSyncResponse * _Nonnull)syncResponse;
- (void)deleteSyncResponseWithId:(NSString * _Nonnull)id;
- (void)deleteSyncResponsesWithIds:(NSArray<NSString *> * _Nonnull)ids;
/// All ids of valid stored sync responses.
/// Sync responses are stored in chunks to save RAM when processing it
/// The array order is chronological
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nonnull syncResponseIds;
/// Mark as outdated some stored sync responses
- (void)markOutdatedWithSyncResponseIds:(NSArray<NSString *> * _Nonnull)syncResponseIds;
/// All outdated sync responses
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nonnull outdatedSyncResponseIds;
/// User account data
@property (nonatomic, copy) NSDictionary<NSString *, id> * _Nullable accountData;
/// Delete all data in the store
- (void)deleteData;
@end


@interface MXSyncResponseFileStore (SWIFT_EXTENSION(SendingnetworkSDK)) <MXSyncResponseStore>
- (NSString * _Nonnull)addSyncResponseWithSyncResponse:(MXCachedSyncResponse * _Nonnull)syncResponse SWIFT_WARN_UNUSED_RESULT;
- (MXCachedSyncResponse * _Nullable)syncResponseWithId:(NSString * _Nonnull)id error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)syncResponseSizeWithId:(NSString * _Nonnull)id SWIFT_WARN_UNUSED_RESULT;
- (void)updateSyncResponseWithId:(NSString * _Nonnull)id syncResponse:(MXCachedSyncResponse * _Nonnull)syncResponse;
- (void)deleteSyncResponseWithId:(NSString * _Nonnull)id;
- (void)deleteSyncResponsesWithIds:(NSArray<NSString *> * _Nonnull)ids;
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nonnull syncResponseIds;
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nonnull outdatedSyncResponseIds;
- (void)markOutdatedWithSyncResponseIds:(NSArray<NSString *> * _Nonnull)syncResponseIds;
@property (nonatomic, copy) NSDictionary<NSString *, id> * _Nullable accountData;
- (void)deleteData;
@end



/// Sync response storage in a file implementation.
SWIFT_CLASS("_TtC17SendingnetworkSDK26MXSyncResponseStoreManager")
@interface MXSyncResponseStoreManager : NSObject
- (nonnull instancetype)initWithSyncResponseStore:(id <MXSyncResponseStore> _Nonnull)syncResponseStore OBJC_DESIGNATED_INITIALIZER;
/// The sync token that is the origin of the stored sync response.
///
/// returns:
/// the original sync token.
- (NSString * _Nullable)syncToken SWIFT_WARN_UNUSED_RESULT;
/// The sync token to use for the next /sync requests
///
/// returns:
/// the next sync token
- (NSString * _Nullable)nextSyncToken SWIFT_WARN_UNUSED_RESULT;
- (MXCachedSyncResponse * _Nullable)firstSyncResponse SWIFT_WARN_UNUSED_RESULT;
- (MXCachedSyncResponse * _Nullable)lastSyncResponse SWIFT_WARN_UNUSED_RESULT;
- (void)markDataOutdated;
- (void)mergedSyncResponseFromSyncResponseIds:(NSArray<NSString *> * _Nonnull)responseIds completion:(void (^ _Nonnull)(MXCachedSyncResponse * _Nullable))completion;
/// Cache a sync response.
/// \param newSyncResponse the sync response to store
///
/// \param syncToken the sync token that generated this sync response.
///
- (void)updateStoreWith:(MXSyncResponse * _Nonnull)newSyncResponse syncToken:(NSString * _Nonnull)syncToken;
/// Fetch event in the store
/// \param eventId Event identifier to be fetched.
///
/// \param roomId Room identifier to be fetched.
///
- (MXEvent * _Nullable)eventWithEventId:(NSString * _Nonnull)eventId inRoom:(NSString * _Nonnull)roomId SWIFT_WARN_UNUSED_RESULT;
/// Fetch room summary for an invited room. Just uses the data in syncResponse to guess the room display name
/// \param roomId Room identifier to be fetched
///
/// \param model A room summary model (if exists) which user had before a sync response
///
- (id <MXRoomSummaryProtocol> _Nullable)roomSummaryForRoomId:(NSString * _Nonnull)roomId using:(id <MXRoomSummaryProtocol> _Nullable)model SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_PROTOCOL("_TtP17SendingnetworkSDK16MXThreadProtocol_")
@protocol MXThreadProtocol
/// Identifier of a thread. It’s equal to identifier of the root event
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
/// Identifier of the room that the thread is in
@property (nonatomic, readonly, copy) NSString * _Nonnull roomId;
/// Number of notifications in the thread
@property (nonatomic, readonly) NSUInteger notificationCount;
/// Number of highlights in the thread
@property (nonatomic, readonly) NSUInteger highlightCount;
/// Flag indicating the current user participated in the thread
@property (nonatomic, readonly) BOOL isParticipated;
/// Root message of the thread
@property (nonatomic, readonly, strong) MXEvent * _Nullable rootMessage;
/// Last message of the thread
@property (nonatomic, readonly, strong) MXEvent * _Nullable lastMessage;
/// Number of replies in the thread. Does not count the root event
@property (nonatomic, readonly) NSInteger numberOfReplies;
@end

@class MXRoomSync;
@protocol MXEventTimeline;

SWIFT_CLASS("_TtC17SendingnetworkSDK8MXThread")
@interface MXThread : NSObject <MXThreadProtocol>
/// Session instance
@property (nonatomic, readonly, weak) MXSession * _Nullable session;
/// Identifier of a thread. It’s equal to identifier of the root event
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
/// Identifier of the room that the thread is in.
@property (nonatomic, readonly, copy) NSString * _Nonnull roomId;
/// Number of notifications in the thread
@property (nonatomic, readonly) NSUInteger notificationCount;
/// Number of highlights in the thread
@property (nonatomic, readonly) NSUInteger highlightCount;
/// Flag indicating the current user participated in the thread
@property (nonatomic, readonly) BOOL isParticipated;
/// Root message of the thread
@property (nonatomic, readonly, strong) MXEvent * _Nullable rootMessage;
/// Last message of the thread
@property (nonatomic, readonly, strong) MXEvent * _Nullable lastMessage;
/// Number of replies in the thread. Does not count the root event
@property (nonatomic, readonly) NSInteger numberOfReplies;
- (void)handleJoinedRoomSync:(MXRoomSync * _Nonnull)roomSync;
/// The live events timeline
/// \param completion Completion block
///
- (void)liveTimeline:(void (^ _Nonnull)(id <MXEventTimeline> _Nonnull))completion;
/// Timeline on a specific event
/// \param eventId Event identifier
///
///
/// returns:
/// The timeline
- (id <MXEventTimeline> _Nonnull)timelineOnEvent:(NSString * _Nonnull)eventId SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



@class MXRoomEventFilter;
@class MXInvitedRoomSync;
@class MXEventListener;

SWIFT_CLASS("_TtC17SendingnetworkSDK21MXThreadEventTimeline")
@interface MXThreadEventTimeline : NSObject <MXEventTimeline>
@property (nonatomic, copy) NSString * _Nonnull timelineId;
@property (nonatomic, copy) NSString * _Nullable initialEventId;
@property (nonatomic) BOOL isLiveTimeline;
@property (nonatomic, strong) MXRoomEventFilter * _Nullable roomEventFilter;
@property (nonatomic, strong) MXRoomState * _Nullable state;
- (nonnull instancetype)initWithThread:(MXThread * _Nonnull)thread andInitialEventId:(NSString * _Nullable)initialEventId;
- (nonnull instancetype)initWithThread:(MXThread * _Nonnull)thread initialEventId:(NSString * _Nullable)initialEventId andStore:(id <MXStore> _Nonnull)store OBJC_DESIGNATED_INITIALIZER;
- (void)initialiseState:(NSArray<MXEvent *> * _Nonnull)stateEvents;
- (void)destroy;
- (BOOL)canPaginate:(MXTimelineDirection)direction SWIFT_WARN_UNUSED_RESULT;
- (void)resetPagination;
- (MXHTTPOperation * _Nonnull)resetPaginationAroundInitialEventWithLimit:(NSUInteger)limit success:(void (^ _Nonnull)(void))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure SWIFT_WARN_UNUSED_RESULT;
- (MXHTTPOperation * _Nonnull)paginate:(NSUInteger)numItems direction:(MXTimelineDirection)direction onlyFromStore:(BOOL)onlyFromStore complete:(void (^ _Nonnull)(void))complete failure:(void (^ _Nonnull)(NSError * _Nonnull))failure SWIFT_WARN_UNUSED_RESULT;
- (NSUInteger)remainingMessagesForBackPaginationInStore SWIFT_WARN_UNUSED_RESULT;
- (void)handleJoinedRoomSync:(MXRoomSync * _Nonnull)roomSync onComplete:(void (^ _Nonnull)(void))onComplete;
- (void)handleInvitedRoomSync:(MXInvitedRoomSync * _Nonnull)invitedRoomSync onComplete:(void (^ _Nonnull)(void))onComplete;
- (void)handleLazyLoadedStateEvents:(NSArray<MXEvent *> * _Nonnull)stateEvents;
- (MXEventListener * _Nonnull)listenToEvents:(MXOnRoomEvent _Nonnull)onEvent SWIFT_WARN_UNUSED_RESULT;
- (MXEventListener * _Nonnull)listenToEventsOfTypes:(NSArray<NSString *> * _Nullable)types onEvent:(MXOnRoomEvent _Nonnull)onEvent SWIFT_WARN_UNUSED_RESULT;
- (void)removeListener:(MXEventListener * _Nonnull)listener;
- (void)removeAllListeners;
- (void)notifyListeners:(MXEvent * _Nonnull)event direction:(MXTimelineDirection)direction;
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC17SendingnetworkSDK13MXThreadModel")
@interface MXThreadModel : NSObject <MXThreadProtocol>
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
@property (nonatomic, readonly, copy) NSString * _Nonnull roomId;
@property (nonatomic, readonly) NSUInteger notificationCount;
@property (nonatomic, readonly) NSUInteger highlightCount;
@property (nonatomic, readonly) BOOL isParticipated;
@property (nonatomic, readonly, strong) MXEvent * _Nullable rootMessage;
@property (nonatomic, readonly, strong) MXEvent * _Nullable lastMessage;
@property (nonatomic, readonly) NSInteger numberOfReplies;
- (nonnull instancetype)initWithRootEvent:(MXEvent * _Nonnull)rootEvent notificationCount:(NSUInteger)notificationCount highlightCount:(NSUInteger)highlightCount OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



SWIFT_CLASS("_TtC17SendingnetworkSDK26MXThreadNotificationsCount")
@interface MXThreadNotificationsCount : NSObject
/// Number of notified threads in a specific room
@property (nonatomic, readonly) NSUInteger numberOfNotifiedThreads;
/// Number of highlighted threads in a specific room
@property (nonatomic, readonly) NSUInteger numberOfHighlightedThreads;
/// Initializer
/// \param numberOfNotifiedThreads number of notified threads
///
/// \param numberOfHighlightedThreads number of highlighted threads
///
- (nonnull instancetype)initWithNumberOfNotifiedThreads:(NSUInteger)numberOfNotifiedThreads numberOfHighlightedThreads:(NSUInteger)numberOfHighlightedThreads OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@protocol MXThreadingServiceDelegate;

SWIFT_CLASS("_TtC17SendingnetworkSDK18MXThreadingService")
@interface MXThreadingService : NSObject
/// Initializer
/// \param session session instance
///
- (nonnull instancetype)initWithSession:(MXSession * _Nonnull)session OBJC_DESIGNATED_INITIALIZER;
/// Handle joined room sync
/// \param roomSync room sync instance
///
- (void)handleJoinedRoomSync:(MXRoomSync * _Nonnull)roomSync forRoom:(NSString * _Nonnull)roomId;
/// Adds event to the related thread instance
/// \param event event to be handled
///
/// \param direction direction of the event
///
/// \param completion Completion block containing the flag indicating that the event is handled
///
- (void)handleEvent:(MXEvent * _Nonnull)event direction:(MXTimelineDirection)direction completion:(void (^ _Nullable)(BOOL))completion;
/// Get notifications count of threads in a room
/// \param roomId Room identifier
///
///
/// returns:
/// Notifications count
- (MXThreadNotificationsCount * _Nonnull)notificationsCountForRoom:(NSString * _Nonnull)roomId SWIFT_WARN_UNUSED_RESULT;
/// Method to check an event is a thread root or not
/// \param event event to be checked
///
///
/// returns:
/// true is given event is a thread root
- (BOOL)isEventThreadRoot:(MXEvent * _Nonnull)event SWIFT_WARN_UNUSED_RESULT;
/// Method to get a thread with specific identifier
/// \param identifier identifier of a thread
///
///
/// returns:
/// thread instance if found, nil otherwise
- (MXThread * _Nullable)threadWithId:(NSString * _Nonnull)identifier SWIFT_WARN_UNUSED_RESULT;
- (MXThread * _Nonnull)createTempThreadWithId:(NSString * _Nonnull)identifier roomId:(NSString * _Nonnull)roomId SWIFT_WARN_UNUSED_RESULT;
/// Mark a thread as read
/// \param threadId Thread id
///
- (void)markThreadAsRead:(NSString * _Nonnull)threadId;
/// Add delegate instance
/// \param delegate delegate instance
///
- (void)addDelegate:(id <MXThreadingServiceDelegate> _Nonnull)delegate;
/// Remove delegate instance
/// \param delegate delegate instance
///
- (void)removeDelegate:(id <MXThreadingServiceDelegate> _Nonnull)delegate;
/// Remove all delegates
- (void)removeAllDelegates;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_PROTOCOL("_TtP17SendingnetworkSDK26MXThreadingServiceDelegate_")
@protocol MXThreadingServiceDelegate
@optional
/// Delegate method to be called when thread are updated in any way.
- (void)threadingServiceDidUpdateThreads:(MXThreadingService * _Nonnull)service;
/// Delegate method to be called when a new local thread is created
- (void)threadingService:(MXThreadingService * _Nonnull)service didCreateNewThread:(MXThread * _Nonnull)thread direction:(MXTimelineDirection)direction;
@end



@interface MXTools (SWIFT_EXTENSION(SendingnetworkSDK))
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger kMXUrlMaxLength;)
+ (NSInteger)kMXUrlMaxLength SWIFT_WARN_UNUSED_RESULT;
/// Readable session state
/// \param state session state
///
///
/// returns:
/// textual representation for the session state in a human readable way
+ (NSString * _Nonnull)readableSessionState:(MXSessionState)state SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)urlStringWithBase:(NSString * _Nonnull)base queryParameters:(NSArray<NSString *> * _Nonnull)queryParameters SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC17SendingnetworkSDK30MXUIKitApplicationStateService")
@interface MXUIKitApplicationStateService : NSObject
@property (nonatomic, readonly) enum UIApplicationState applicationState;
@property (nonatomic, readonly) NSTimeInterval backgroundTimeRemaining;
+ (NSString * _Nonnull)readableApplicationState:(enum UIApplicationState)applicationState SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)readableEstimatedBackgroundTimeRemaining:(NSTimeInterval)backgroundTimeRemaining SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("MXUsersTrustLevelSummaryMO")
@interface MXUsersTrustLevelSummaryMO : NSManagedObject
@property (nonatomic) int32_t s_usersCount;
@property (nonatomic) int32_t s_trustedUsersCount;
@property (nonatomic) int32_t s_devicesCount;
@property (nonatomic) int32_t s_trustedDevicesCount;
- (nonnull instancetype)initWithEntity:(NSEntityDescription * _Nonnull)entity insertIntoManagedObjectContext:(NSManagedObjectContext * _Nullable)context OBJC_DESIGNATED_INITIALIZER;
@end

enum MXiOSAudioOutputRouteType : NSInteger;

/// Audio output route class
SWIFT_CLASS("_TtC17SendingnetworkSDK21MXiOSAudioOutputRoute")
@interface MXiOSAudioOutputRoute : NSObject
/// Unique identifier for the route
@property (nonatomic, copy) NSString * _Nonnull identifier;
/// Route type of the route
@property (nonatomic) enum MXiOSAudioOutputRouteType routeType;
/// Name of the route. May not be localized for some route types, especially for <code>loudSpeakers</code>
@property (nonatomic, copy) NSString * _Nonnull name;
/// Flag to indicate whether this is an external route
@property (nonatomic, readonly) BOOL isExternal;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Audio output route type
typedef SWIFT_ENUM(NSInteger, MXiOSAudioOutputRouteType, closed) {
/// the speakers at the top of the screen.
  MXiOSAudioOutputRouteTypeBuiltIn = 0,
/// the speakers at the bottom of the phone
  MXiOSAudioOutputRouteTypeLoudSpeakers = 1,
/// external wired headphones
  MXiOSAudioOutputRouteTypeExternalWired = 2,
/// external Bluetooth device
  MXiOSAudioOutputRouteTypeExternalBluetooth = 3,
/// external CarPlay device
  MXiOSAudioOutputRouteTypeExternalCar = 4,
};

@protocol MXiOSAudioOutputRouterDelegate;
@class MXCall;

/// Audio output router class
SWIFT_CLASS("_TtC17SendingnetworkSDK22MXiOSAudioOutputRouter") SWIFT_AVAILABILITY(ios,introduced=10.0)
@interface MXiOSAudioOutputRouter : NSObject
/// Delegate object
@property (nonatomic, weak) id <MXiOSAudioOutputRouterDelegate> _Nullable delegate;
/// Current route type. Listen <code>audioOutputRouterDidUpdateRoute</code> delegate methods for changes.
@property (nonatomic, readonly, strong) MXiOSAudioOutputRoute * _Nullable currentRoute;
/// Flag to learn if some external device is connected.
/// Listen <code>audioOutputRouterDidUpdateAvailableRouteTypes</code> delegate method for changes.
@property (nonatomic, readonly) BOOL isAnyExternalDeviceConnected;
/// Initializer
/// \param call Call object to decide default route type.
///
- (nonnull instancetype)initForCall:(MXCall * _Nonnull)call OBJC_DESIGNATED_INITIALIZER;
/// Available route types
/// Listen <code>audioOutputRouterDidUpdateAvailableRouteTypes</code> delegate method for changes.
@property (nonatomic, readonly, copy) NSArray<MXiOSAudioOutputRoute *> * _Nonnull availableOutputRoutes;
/// The route for <code>builtIn</code> route type. May be nil for some cases, like when a wired headphones are connected.
@property (nonatomic, readonly, strong) MXiOSAudioOutputRoute * _Nullable builtInRoute;
/// The route for <code>loudSpeakers</code> route type.
@property (nonatomic, readonly, strong) MXiOSAudioOutputRoute * _Nullable loudSpeakersRoute;
/// Attempt to override route type to given type.
/// \param route Desired route. If <code>nil</code> passed, then it would fallback to the default route.
///
- (void)changeCurrentRouteTo:(MXiOSAudioOutputRoute * _Nullable)route;
/// Reroute the audio for the current route type.
- (void)reroute;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Audio output router delegate
SWIFT_PROTOCOL("_TtP17SendingnetworkSDK30MXiOSAudioOutputRouterDelegate_") SWIFT_AVAILABILITY(ios,introduced=10.0)
@protocol MXiOSAudioOutputRouterDelegate
@optional
/// Delegate method to be called when output route changes, for both user actions and system changes
/// Check again <code>routeType</code> to see the change.
/// \param router Router instance
///
- (void)audioOutputRouterWithDidUpdateRoute:(MXiOSAudioOutputRouter * _Nonnull)router;
/// Delegate method to be called when available output routes change
/// Check again <code>availableOutputRouteTypes</code> to see the changes.
/// \param router Router instance
///
- (void)audioOutputRouterWithDidUpdateAvailableRouteTypes:(MXiOSAudioOutputRouter * _Nonnull)router;
@end












SWIFT_CLASS("_TtC17SendingnetworkSDK12RadixService")
@interface RadixService : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) RadixService * _Nonnull shared;)
+ (RadixService * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (NSString * _Nullable)baseURL SWIFT_WARN_UNUSED_RESULT;
- (void)start;
- (void)stop;
- (void)setMulticastEnabled:(BOOL)enabled;
- (void)setStaticPeer:(NSString * _Nonnull)uri;
@end


SWIFT_CLASS("_TtC17SendingnetworkSDK13RadixSettings")
@interface RadixSettings : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) RadixSettings * _Nonnull shared;)
+ (RadixSettings * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) BOOL mainNet;
@property (nonatomic) BOOL p2pDisableMulticast;
@property (nonatomic) BOOL p2pEnableStaticPeer;
@property (nonatomic, copy) NSString * _Nonnull p2pStaticPeerURI;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC17SendingnetworkSDK10Web3Wallet")
@interface Web3Wallet : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

#endif
#if defined(__cplusplus)
#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
